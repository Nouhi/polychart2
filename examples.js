// Generated by CoffeeScript 1.4.0
(function() {
  var _ref;

  if ((_ref = this.examples) == null) {
    this.examples = {};
  }

  this.examples.area_static = function(dom) {
    var c, data, jsondata, spec;
    jsondata = [
      {
        a: 1,
        b: 5,
        c: 'A'
      }, {
        a: 3,
        b: 4,
        c: 'A'
      }, {
        a: 2,
        b: 3,
        c: 'A'
      }, {
        a: 2,
        b: 2,
        c: 'B'
      }, {
        a: 1,
        b: 4,
        c: 'B'
      }, {
        a: 2.2,
        b: 3,
        c: 'B'
      }, {
        a: 3,
        b: 3,
        c: 'B'
      }
    ];
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'area',
          x: 'a',
          y: 'b',
          color: 'c'
        }
      ],
      guides: {
        x: {
          title: 'The x-axis',
          renderGrid: false
        },
        y: {
          title: 'The y-axis',
          renderLine: false
        },
        color: {
          title: 'Some Color'
        }
      },
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

  this.examples.area_missing = function(dom) {
    var data;
    data = polyjs.data({
      data: [
        {
          a: 4,
          b: 2,
          c: 'B'
        }, {
          a: 5,
          b: 7,
          c: 'B'
        }, {
          a: 10,
          b: 2,
          c: 'B'
        }, {
          a: 11,
          b: 2,
          c: 'B'
        }, {
          a: 7,
          c: 'B'
        }, {
          a: null,
          b: 3,
          c: 'B'
        }, {
          a: void 0,
          b: null,
          c: 'B'
        }, {
          a: 2,
          b: 2,
          c: 'A'
        }, {
          a: 4,
          b: 7,
          c: 'A'
        }, {
          a: 9,
          b: null,
          c: 'A'
        }, {
          a: 11,
          b: 1,
          c: 'A'
        }, {
          a: 5,
          c: 'A'
        }, {
          a: null,
          b: 3,
          c: 'A'
        }, {
          a: void 0,
          b: null,
          c: 'A'
        }
      ]
    });
    return polyjs.chart({
      layer: {
        data: data,
        type: 'area',
        x: 'a',
        y: 'b',
        color: 'c'
      },
      dom: dom
    });
  };

  this.examples.area_single = function(dom) {
    var c, data, i, jsondata, spec, update;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'area',
          x: 'index',
          y: 'value'
        }
      ],
      guides: {
        y: {
          type: 'num',
          min: 0,
          max: 10,
          ticks: [2, 4, 6, 8],
          labels: {
            2: 'Two',
            4: 'Four',
            6: 'Six',
            8: 'Eight'
          }
        }
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    update = function() {
      jsondata.shift();
      jsondata.push({
        index: i++,
        value: Math.random() * 10
      });
      data.update({
        data: jsondata
      });
      return setTimeout(update, 1000);
    };
    setTimeout(update, 1000);
    return c.addHandler(function(type, e) {
      if (type === 'data') {
        return c.make();
      }
    });
  };

  this.examples.area_double = function(dom) {
    var c, data, even, i, item, jsondata, spec, update, value;
    even = function(i) {
      if (i % 2) {
        return "Odd";
      } else {
        return "Even";
      }
    };
    value = function() {
      return 2 + Math.random() * 5;
    };
    item = function(i) {
      return {
        index: Math.floor(i / 2),
        even: even(i),
        value: value()
      };
    };
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 19; i = ++_i) {
        _results.push(item(i));
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'area',
          x: 'index',
          y: 'value',
          color: 'even'
        }
      ],
      guides: {
        y: {
          type: 'num',
          min: 0,
          max: 15,
          position: 'right'
        },
        x: {
          position: 'bottom'
        },
        color: {
          title: "Parity"
        }
      },
      legendPosition: "left",
      dom: dom
    };
    c = polyjs.chart(spec);
    update = function() {
      var j, _i, _len, _ref1;
      _ref1 = [1, 2];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        j = _ref1[_i];
        jsondata.shift();
        jsondata.push(item(i));
        i++;
      }
      data.update({
        data: jsondata
      });
      return setTimeout(update, 1000);
    };
    setTimeout(update, 1000);
    return c.addHandler(function(type, e) {
      if (type === 'data') {
        return c.make();
      }
    });
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var _ref;

  if ((_ref = this.examples) == null) {
    this.examples = {};
  }

  this.examples.backend_point = function(dom) {
    var c, data, spec;
    data = polyjs.data.url("/db?table=example1&limit=50", true);
    spec = {
      layer: {
        data: data,
        type: 'point',
        x: 'grp',
        y: 'val1'
      },
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

  this.examples.backend_bar = function(dom) {
    var c, data, spec;
    data = polyjs.data.url("/db?table=example1&limit=50", true);
    spec = {
      layer: {
        data: data,
        type: 'bar',
        x: 'grp',
        y: 'val1',
        color: 'category'
      },
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

  this.examples.backend_sum = function(dom) {
    var c, data, spec;
    data = polyjs.data.url("/db?table=example1&limit=50", true);
    spec = {
      layer: {
        data: data,
        type: 'bar',
        x: {
          "var": 'grp',
          sort: 'sum(val1)',
          limit: 2
        },
        y: 'sum(val1)'
      },
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

  this.examples.backend_count = function(dom) {
    var c, data, spec;
    data = polyjs.data.url("/db?table=example1&limit=50", true);
    spec = {
      layer: {
        data: data,
        type: 'bar',
        x: 'grp',
        y: 'count(val1)'
      },
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var _ref;

  if ((_ref = this.examples) == null) {
    this.examples = {};
  }

  this.examples.bar = function(dom) {
    var c, data, i, jsondata, spec;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'index',
          y: 'value',
          id: 'index',
          opacity: 'value'
        }
      ],
      guides: {
        x: {
          type: 'num',
          bw: 1
        },
        y: {
          type: 'num',
          min: 0,
          max: 10,
          ticks: [2, 4, 6, 8],
          labels: {
            2: 'Two',
            4: 'Four',
            6: 'Six',
            8: 'Eight'
          }
        }
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    c.addHandler(function(type, e) {
      data = e.evtData;
      if (type === 'reset') {
        jsondata.shift();
        jsondata.push({
          index: i++,
          value: Math.random() * 10
        });
        spec.layers[0].data.update({
          data: jsondata
        });
        c.make(spec);
      }
      if (type === 'click') {
        return alert("You clicked on index: " + data.index["in"][0]);
      }
    });
    return window.c = c;
  };

  this.examples.bar_missing = function(dom) {
    var data;
    data = polyjs.data({
      data: [
        {
          a: 4,
          b: 2,
          c: 'B'
        }, {
          a: 5,
          b: 7,
          c: 'B'
        }, {
          a: 10,
          b: 2,
          c: 'B'
        }, {
          a: 11,
          b: 2,
          c: 'B'
        }, {
          a: 7,
          c: 'B'
        }, {
          a: null,
          b: 3,
          c: 'B'
        }, {
          a: void 0,
          b: null,
          c: 'B'
        }, {
          a: 2,
          b: 2,
          c: 'A'
        }, {
          a: 4,
          b: 7,
          c: 'A'
        }, {
          a: 9,
          b: null,
          c: 'A'
        }, {
          a: 11,
          b: 1,
          c: 'A'
        }, {
          a: 5,
          c: 'A'
        }, {
          a: null,
          b: 3,
          c: 'A'
        }, {
          a: void 0,
          b: null,
          c: 'A'
        }
      ]
    });
    return polyjs.chart({
      layer: {
        data: data,
        type: 'bar',
        x: 'bin(a, 1)',
        y: 'b',
        color: 'c'
      },
      dom: dom
    });
  };

  this.examples.bar_flip = function(dom) {
    var c, data, i, jsondata, spec, update;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'index',
          y: 'value',
          id: 'index',
          opacity: 'value'
        }
      ],
      guides: {
        x: {
          type: 'num',
          bw: 1
        },
        y: {
          type: 'num',
          min: 0,
          max: 10,
          ticks: [2, 4, 6, 8],
          labels: {
            2: 'Two',
            4: 'Four',
            6: 'Six',
            8: 'Eight'
          }
        }
      },
      coord: {
        type: 'cartesian',
        flip: true
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    update = function() {
      jsondata.shift();
      jsondata.push({
        index: i++,
        value: Math.random() * 10
      });
      data.update({
        data: jsondata
      });
      return setTimeout(update, 1000);
    };
    setTimeout(update, 1000);
    return c.addHandler(function(type, e) {
      if (type === 'data') {
        return c.make();
      }
    });
  };

  this.examples.bar_polar = function(dom) {
    var c, data, i, jsondata, redraw, spec;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'index',
          y: 'value',
          id: 'index'
        }
      ],
      guides: {
        x: {
          type: 'num',
          bw: 1
        },
        y: {
          type: 'num',
          min: 0,
          max: 10,
          ticks: [2, 4, 6, 8],
          labels: {
            2: 'Two',
            4: 'Four',
            6: 'Six',
            8: 'Eight'
          }
        }
      },
      coord: {
        type: 'polar',
        flip: true
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    redraw = function() {
      jsondata.shift();
      jsondata.push({
        index: i++,
        value: Math.random() * 10
      });
      spec.layers[0].data.update({
        data: jsondata
      });
      c.make(spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.bar_static = function(dom) {
    var c, data, i, jsondata, spec;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'index',
          y: 'value',
          id: 'index'
        }
      ],
      guides: {
        x: {
          type: 'num',
          bw: 1
        },
        y: {
          type: 'num',
          min: 0,
          max: 10,
          ticks: [2, 4, 6, 8],
          labels: {
            2: 'Two',
            4: 'Four',
            6: 'Six',
            8: 'Eight'
          }
        }
      },
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

  this.examples.bar_dodge = function(dom) {
    var c, data, i, jsondata, o, spec;
    o = function(i) {
      if (i % 2 === 0) {
        return 'yay';
      } else {
        return 'no';
      }
    };
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i % 3,
          value: Math.random() * 10,
          o: o(i)
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'bin(index,1)',
          y: 'value',
          color: 'o',
          position: 'dodge'
        }
      ],
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

  this.examples.bar_sum = function(dom) {
    var c, data, i, jsondata, redraw, spec;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 5; i = ++_i) {
        _results.push({
          index: i,
          two: (i % 2 === 0 ? 'a' : 'b'),
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'two',
          y: 'sum(value)',
          color: 'two',
          id: 'two'
        }
      ],
      guides: {
        color: {
          labels: {
            'a': 'Even Numbers',
            'b': 'Odd Numbers'
          },
          title: 'Test'
        },
        x: {
          labels: {
            'a': 'Even Numbers',
            'b': 'Odd Numbers'
          }
        },
        y: {
          min: 0,
          max: 30
        }
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    redraw = function() {
      jsondata.shift();
      jsondata.push({
        index: i++,
        two: (i % 2 === 0 ? 'a' : 'b'),
        value: Math.random() * 10
      });
      spec.layers[0].data.update({
        data: jsondata
      });
      c.make(spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.bar_stack = function(dom) {
    var c, data, i, jsondata, redraw, spec;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          two: (i % 2 === 0 ? 'a' : 'b'),
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'two',
          y: 'value',
          color: 'index'
        }
      ],
      guides: {
        color: {
          labels: {
            'a': 'Even Numbers',
            'b': 'Odd Numbers'
          },
          title: 'Test'
        },
        x: {
          labels: {
            'a': 'Even Numbers',
            'b': 'Odd Numbers'
          }
        }
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    redraw = function() {
      jsondata.push({
        index: i++,
        two: (i % 2 === 0 ? 'a' : 'b'),
        value: Math.random() * 10
      });
      spec.layers[0].data.update({
        data: jsondata
      });
      c.make(spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.bar_ajax_js = function(dom) {
    var c, data, spec;
    data = polyjs.data.url("data/test.json");
    spec = {
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'A',
          y: 'B'
        }
      ],
      dom: dom,
      guide: {
        y: {
          type: 'num'
        }
      }
    };
    return c = polyjs.chart(spec);
  };

  this.examples.bar_ajax_csv = function(dom) {
    var c, data, spec;
    data = polyjs.data.url("data/test.csv");
    spec = {
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'A',
          y: 'B'
        }
      ],
      dom: dom,
      guide: {
        y: {
          type: 'num'
        }
      }
    };
    return c = polyjs.chart(spec);
  };

  this.examples.bar_date_binned = function(dom) {
    var c, data, i, point, spec;
    point = function() {
      return {
        time: moment().add('minutes', Math.random() * 206232).unix(),
        value: Math.random() * 2
      };
    };
    data = polyjs.data({
      data: (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 5000; i = ++_i) {
          _results.push(point());
        }
        return _results;
      })(),
      meta: {
        time: {
          type: 'date',
          format: 'unix'
        }
      }
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'bin("time", "month")',
          y: 'sum(value)'
        }
      ],
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

  this.examples.bar_date_binned2 = function(dom) {
    var c, data, i, point, spec;
    point = function() {
      return {
        time: moment().add('minutes', Math.random() * 23803).unix(),
        value: Math.random()
      };
    };
    data = polyjs.data({
      data: (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 500; i = ++_i) {
          _results.push(point());
        }
        return _results;
      })(),
      meta: {
        time: {
          type: 'date',
          format: 'unix'
        }
      }
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'bin(time, day)',
          y: 'median(value)'
        }, {
          data: data,
          type: 'line',
          x: 'time',
          y: 'value',
          color: {
            "const": 'black'
          }
        }
      ],
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

  this.examples.bar_date_binned3 = function(dom) {
    var c, data, i, point, spec;
    point = function() {
      return {
        time: moment().add('minutes', Math.random() * 206232 * 4).unix(),
        value: Math.random() * 2
      };
    };
    data = polyjs.data({
      data: (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 5000; i = ++_i) {
          _results.push(point());
        }
        return _results;
      })(),
      meta: {
        time: {
          type: 'date',
          format: 'unix'
        }
      }
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'bin("time", "month")',
          y: 'sum(value)'
        }
      ],
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var datafn2, _ref;

  if ((_ref = this.examples) == null) {
    this.examples = {};
  }

  datafn2 = function(lim) {
    var i, item, _i, _results;
    item = function(i) {
      return {
        mod3: i % 3 === 0 ? "G1" : i % 3 === 1 ? "G2" : "G3",
        value: i === 99 ? 25 : Math.random() * 10
      };
    };
    _results = [];
    for (i = _i = 0; 0 <= lim ? _i <= lim : _i >= lim; i = 0 <= lim ? ++_i : --_i) {
      _results.push(item(i));
    }
    return _results;
  };

  this.examples.box = function(dom) {
    var data;
    data = polyjs.data({
      data: datafn2(100)
    });
    return polyjs.chart({
      layers: [
        {
          data: data,
          type: 'box',
          x: 'mod3',
          y: 'box(value)'
        }
      ],
      dom: dom
    });
  };

  this.examples.box_polar = function(dom) {
    var data;
    data = polyjs.data({
      data: datafn2(100)
    });
    return polyjs.chart({
      layers: [
        {
          data: data,
          type: 'box',
          x: 'mod3',
          y: 'box(value)'
        }
      ],
      dom: dom,
      coord: {
        type: 'polar'
      }
    });
  };

  this.examples.box_small = function(dom) {
    var data;
    data = polyjs.data({
      data: datafn2(8)
    });
    return polyjs.chart({
      layers: [
        {
          data: data,
          type: 'box',
          x: 'mod3',
          y: 'box(value)'
        }
      ],
      dom: dom
    });
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var _ref;

  if ((_ref = this.examples) == null) {
    this.examples = {};
  }

  this.examples.facet = function(dom) {
    var c, data, i, jsondata, o, spec;
    o = function(i) {
      if (i % 3 === 0) {
        return 'yay';
      } else if (i % 3 === 1) {
        return 'no';
      } else {
        return 'nodisplay';
      }
    };
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 20; i = ++_i) {
        _results.push({
          index: i % 7,
          value: Math.random() * 10,
          o: o(i)
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'bin(index,1)',
          y: 'value',
          color: 'o',
          position: 'dodge'
        }
      ],
      dom: dom,
      facet: {
        type: 'wrap',
        "var": {
          "var": 'o',
          levels: ['yay', 'no']
        },
        formatter: function(x) {
          if (x.o === 'yay') {
            return 'First Group';
          } else {
            return 'Second Group';
          }
        }
      },
      width: 600,
      height: 200
    };
    return c = polyjs.chart(spec);
  };

  this.examples.facet_grid = function(dom) {
    var c, data, i, jsondata, o, spec;
    o = function(i) {
      if (i % 2 === 0) {
        return 'yay';
      } else {
        return 'no';
      }
    };
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i % 3,
          value: Math.random() * 10,
          o: o(i)
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'bin(index,1)',
          y: 'value',
          position: 'dodge'
        }
      ],
      dom: dom,
      facet: {
        type: 'grid',
        x: 'o',
        y: 'o'
      },
      width: 600,
      height: 500
    };
    return c = polyjs.chart(spec);
  };

  this.examples.facet3 = function(dom) {
    var c, data, i, jsondata, o, spec;
    o = function(i) {
      return "" + i % 6;
    };
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 50; i = ++_i) {
        _results.push({
          index: i % 7,
          value: Math.random() * 10,
          o: o(i)
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'bin(index,1)',
          y: 'value',
          position: 'dodge'
        }
      ],
      dom: dom,
      facet: {
        type: 'wrap',
        "var": 'o'
      },
      width: 600,
      height: 500
    };
    return c = polyjs.chart(spec);
  };

  this.examples.facet4 = function(dom) {
    var c, data, i, jsondata, o, p, spec;
    o = function(i) {
      return "" + i % 3;
    };
    p = function(i) {
      return "" + i % 2;
    };
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 50; i = ++_i) {
        _results.push({
          index: i % 6,
          value: Math.random() * 10,
          o: o(i),
          p: p(i)
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'bin(index,1)',
          y: 'value',
          position: 'dodge'
        }
      ],
      dom: dom,
      facet: {
        type: 'grid',
        x: 'o',
        y: 'p'
      },
      width: 600,
      height: 500
    };
    return c = polyjs.chart(spec);
  };

  this.examples.facet_polar = function(dom) {
    var c, data, i, jsondata, o, p, spec;
    o = function(i) {
      return "" + i % 3;
    };
    p = function(i) {
      return "" + i % 2;
    };
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 50; i = ++_i) {
        _results.push({
          index: i % 6,
          value: Math.random() * 10,
          o: o(i),
          p: p(i)
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'bin(index,1)',
          y: 'value',
          position: 'dodge'
        }
      ],
      coord: {
        type: 'polar'
      },
      dom: dom,
      facet: {
        type: 'grid',
        x: 'o',
        y: 'p'
      },
      width: 600,
      height: 500
    };
    return c = polyjs.chart(spec);
  };

  this.examples.facet_polar_wrap = function(dom) {
    var c, data, i, jsondata, o, spec;
    o = function(i) {
      return "" + i % 6;
    };
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 50; i = ++_i) {
        _results.push({
          index: i % 7,
          value: Math.random() * 10,
          o: o(i)
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'bin(index,1)',
          y: 'value',
          color: 'o',
          position: 'dodge'
        }
      ],
      coord: {
        type: 'polar',
        flip: true
      },
      dom: dom,
      facet: {
        type: 'wrap',
        "var": 'o'
      },
      width: 600,
      height: 500
    };
    return c = polyjs.chart(spec);
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var _ref;

  if ((_ref = this.examples) == null) {
    this.examples = {};
  }

  this.examples.funnel = function(dom) {
    var c, data;
    data = polyjs.data({
      data: {
        segment: ["FirstTime", "FirstTime", "FirstTime", "Return", "Return", "Return", "4+", "4+", "4+"],
        source: ["Referral", "LinkedIn", "Cold Call", "Referral", "LinkedIn", "Cold Call", "Referral", "LinkedIn", "Cold Call"],
        value: [10, 15, 20, 5, 10, 18, 3, 5, 8]
      }
    });
    return c = polyjs.chart({
      layers: [
        {
          data: data,
          type: 'bar',
          x: {
            "var": 'segment',
            sort: 'sum(value)',
            desc: true
          },
          y: 'value',
          color: 'source'
        }
      ],
      guides: {
        x: {
          renderLine: false,
          renderTick: false,
          renderLabel: true,
          renderGrid: false
        },
        y: {
          position: "none"
        }
      },
      coord: {
        type: 'cartesian',
        flip: true
      },
      dom: dom,
      paddingTop: 50,
      height: 300
    });
  };

  this.examples.funnelerr1 = function(dom) {
    var c, data;
    data = polyjs.data({
      data: {
        segment: ["FirstTime", "FirstTime", "FirstTime", "Return", "Return", "Return", "4+", "4+", "4+"],
        source: ["Referral", "LinkedIn", "Cold Call", "Referral", "LinkedIn", "Cold Call", "Referral", "LinkedIn", "Cold Call"],
        value: [10, 15, 20, 5, 10, 18, 3, 5, 8]
      }
    });
    return c = polyjs.chart({
      layers: [
        {
          data: data,
          type: 'bar',
          x: {
            "var": 'segment',
            sort: 'sum(value)',
            desc: true
          },
          y: 'value',
          color: 'source'
        }
      ],
      title: 'This is a Big Graph Title',
      legendPosition: 'bottom',
      guides: {
        x: {
          renderLine: false,
          renderTick: false,
          renderLabel: true,
          renderGrid: false
        },
        y: {
          position: "none"
        },
        color: {
          title: 'This is another big title the overlaps graph area'
        }
      },
      coord: {
        type: 'cartesian',
        flip: true
      },
      dom: dom,
      height: 300
    });
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var _ref;

  if ((_ref = this.examples) == null) {
    this.examples = {};
  }

  this.examples.interact_bar = function(dom) {
    var c, data, i, jsondata, spec;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'index',
          y: 'value',
          id: 'index',
          opacity: 'value'
        }
      ],
      guides: {
        x: {
          type: 'num',
          bw: 1
        },
        y: {
          type: 'num',
          min: 0,
          max: 10,
          ticks: [2, 4, 6, 8],
          labels: {
            2: 'Two',
            4: 'Four',
            6: 'Six',
            8: 'Eight'
          }
        }
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    return c.addHandler(function(type, e) {
      var r;
      data = e.evtData;
      if (type === 'click') {
        alert("You clicked on index: " + data.index["in"][0]);
      }
      if (type === 'select') {
        r = function(x) {
          return Math.round(x * 10) / 10;
        };
        if ((data.index != null) && (data.value != null)) {
          return alert("index: " + (r(data.index.ge)) + " - " + (r(data.index.le)) + "\nvalue: " + (r(data.value.ge)) + " - " + (r(data.value.le)));
        } else {
          return alert("You selected out of range! Please select within the graph.");
        }
      }
    });
  };

  this.examples.interact_point = function(dom) {
    var c, data, i, jsondata, spec;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'point',
          x: 'index',
          y: 'value'
        }
      ],
      dom: dom
    };
    c = polyjs.chart(spec);
    return c.addHandler(function(type, e) {
      data = e.evtData;
      if (type === 'click') {
        return alert("You clicked on index: " + data.index["in"][0]);
      }
    });
  };

  this.examples.interact_line = function(dom) {
    var c, data, i, jsondata, spec;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          k: "" + i % 2,
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'line',
          x: 'index',
          y: 'value',
          color: 'k'
        }
      ],
      dom: dom
    };
    c = polyjs.chart(spec);
    return c.addHandler(function(type, e) {
      data = e.evtData;
      if (type === 'click') {
        return alert("You clicked on index: " + data.k["in"][0]);
      }
    });
  };

  this.examples.interact_path = function(dom) {
    var c, data, i, jsondata, spec;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          k: "" + i % 2,
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'path',
          x: 'index',
          y: 'value',
          color: 'k'
        }
      ],
      dom: dom
    };
    c = polyjs.chart(spec);
    return c.addHandler(function(type, e) {
      data = e.evtData;
      if (type === 'click') {
        return alert("You clicked on index: " + data.k["in"][0]);
      }
    });
  };

  this.examples.interact_tiles = function(dom) {
    var c, data, datafn, spec;
    datafn = function() {
      var a, b, i, item, value, _i, _results;
      a = function(i) {
        return i % 5;
      };
      b = function(i) {
        return Math.floor(i / 5);
      };
      value = function() {
        return Math.random() * 5;
      };
      item = function(i) {
        return {
          mod5: a(i),
          floor5: b(i),
          value: value()
        };
      };
      _results = [];
      for (i = _i = 0; _i <= 24; i = ++_i) {
        _results.push(item(i));
      }
      return _results;
    };
    data = polyjs.data({
      data: datafn()
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'tile',
          x: 'bin(mod5, 1)',
          y: 'bin(floor5,1)',
          color: 'value'
        }
      ],
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

  this.examples.interact_twocharts = function(dom, dom2) {
    var c1, c2, data1, data2, spec1, spec2;
    data1 = polyjs.data({
      data: [
        {
          city: 'tomato',
          area: 235
        }, {
          city: 'junkie',
          area: 135
        }, {
          city: 'banana',
          area: 335
        }
      ]
    });
    data2 = polyjs.data({
      data: [
        {
          city: 'tomato',
          month: 1,
          population: 2352
        }, {
          city: 'tomato',
          month: 2,
          population: 2332
        }, {
          city: 'tomato',
          month: 3,
          population: 2342
        }, {
          city: 'tomato',
          month: 4,
          population: 2252
        }, {
          city: 'tomato',
          month: 5,
          population: 2292
        }, {
          city: 'tomato',
          month: 6,
          population: 2292
        }, {
          city: 'tomato',
          month: 7,
          population: 2222
        }, {
          city: 'junkie',
          month: 1,
          population: 4352
        }, {
          city: 'junkie',
          month: 2,
          population: 3332
        }, {
          city: 'junkie',
          month: 3,
          population: 3342
        }, {
          city: 'junkie',
          month: 4,
          population: 4252
        }, {
          city: 'junkie',
          month: 5,
          population: 4292
        }, {
          city: 'junkie',
          month: 6,
          population: 3292
        }, {
          city: 'junkie',
          month: 7,
          population: 3222
        }, {
          city: 'banana',
          month: 1,
          population: 1352
        }, {
          city: 'banana',
          month: 2,
          population: 1332
        }, {
          city: 'banana',
          month: 3,
          population: 1342
        }, {
          city: 'banana',
          month: 4,
          population: 1252
        }, {
          city: 'banana',
          month: 5,
          population: 2002
        }, {
          city: 'banana',
          month: 6,
          population: 1292
        }, {
          city: 'banana',
          month: 7,
          population: 1222
        }
      ]
    });
    spec1 = {
      layer: {
        data: data1,
        type: 'bar',
        x: {
          "var": 'city',
          sort: 'area',
          asc: false
        },
        y: 'area',
        color: 'city'
      },
      dom: dom
    };
    spec2 = {
      layer: {
        data: data2,
        type: 'area',
        x: 'month',
        y: 'population',
        filter: {
          city: {
            "in": ['tomato']
          }
        }
      },
      guide: {
        y: {
          min: 0,
          max: 5000
        }
      },
      title: 'tomato',
      dom: dom2
    };
    c1 = polyjs.chart(spec1);
    c2 = null;
    return c1.addHandler(function(type, e) {
      var data, filter;
      if (type === 'click') {
        data = e.evtData;
        filter = {
          city: data.city
        };
        spec2.layer.filter = filter;
        spec2.layer.color = {
          "const": e.attrs.fill
        };
        spec2.title = filter.city["in"][0];
        if (!c2) {
          return c2 = polyjs.chart(spec2);
        } else {
          return c2.make(spec2);
        }
      }
    });
  };

  this.examples.interact_drilldown = function(dom) {
    var c, data;
    data = polyjs.data({
      data: [
        {
          country: 'Canada',
          region: 'Ontario',
          city: 'Toronto',
          value: 5235
        }, {
          country: 'Canada',
          region: 'Ontario',
          city: 'Kingston',
          value: 5034
        }, {
          country: 'Canada',
          region: 'Ontario',
          city: 'Waterloo',
          value: 235
        }, {
          country: 'Canada',
          region: 'Ontario',
          city: 'Kitchener',
          value: 935
        }, {
          country: 'Canada',
          region: 'BC',
          city: 'Vancouver',
          value: 6735
        }, {
          country: 'Canada',
          region: 'BC',
          city: 'Victoria',
          value: 3732
        }, {
          country: 'Canada',
          region: 'BC',
          city: 'Kelona',
          value: 29
        }, {
          country: 'Canada',
          region: 'Nova Scotia',
          city: 'Halifax',
          value: 29
        }, {
          country: 'United States',
          region: 'New York',
          city: 'Manhattan',
          value: 9900
        }, {
          country: 'United States',
          region: 'New York',
          city: 'Albany',
          value: 1900
        }, {
          country: 'United States',
          region: 'California',
          city: 'San Francisco',
          value: 8900
        }, {
          country: 'United States',
          region: 'California',
          city: 'San Antonio',
          value: 1900
        }
      ]
    });
    c = polyjs.chart({
      layer: {
        data: data,
        type: 'bar',
        x: 'country',
        y: 'sum(value)'
      },
      dom: dom
    });
    return c.addHandler(polyjs.handler.drilldown('x', ['country', 'region', 'city']));
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var data, i, _ref;

  if ((_ref = this.examples) == null) {
    this.examples = {};
  }

  data = polyjs.data({
    data: (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          k: "" + i % 2,
          value: Math.random() * 10
        });
      }
      return _results;
    })()
  });

  this.examples.test_layerchange = function(dom) {
    var c, spec1, spec2, t;
    spec1 = {
      layer: {
        data: data,
        type: 'point',
        x: 'index',
        y: 'value',
        color: 'k'
      },
      dom: dom
    };
    spec2 = {
      layer: {
        data: data,
        type: 'bar',
        x: 'bin(index,1)',
        y: 'value',
        color: 'k'
      },
      dom: dom
    };
    t = 1;
    c = polyjs.chart(spec1);
    return c.addHandler(function(type, e) {
      data = e.evtData;
      if (type === 'reset') {
        if (t === 1) {
          c.make(spec2);
          return t = 2;
        } else {
          c.make(spec1);
          return t = 1;
        }
      }
    });
  };

  this.examples.test_facetchange = function(dom) {
    var c, spec1, spec2, t;
    spec1 = {
      layer: {
        data: data,
        type: 'point',
        x: 'index',
        y: 'value',
        color: 'k'
      },
      dom: dom
    };
    spec2 = {
      layer: {
        data: data,
        type: 'bar',
        x: 'bin(index,2)',
        y: 'value',
        color: 'k'
      },
      dom: dom,
      facet: {
        type: 'wrap',
        "var": 'k'
      }
    };
    t = 1;
    c = polyjs.chart(spec1);
    return c.addHandler(function(type, e) {
      data = e.evtData;
      if (type === 'reset') {
        if (t === 1) {
          c.make(spec2);
          return t = 2;
        } else {
          c.make(spec1);
          return t = 1;
        }
      }
    });
  };

  this.examples.test_coordchange = function(dom) {
    var c, spec1, spec2, t;
    spec1 = {
      layer: {
        data: data,
        type: 'point',
        x: 'index',
        y: 'value',
        color: 'k'
      },
      dom: dom
    };
    spec2 = {
      layer: {
        data: data,
        type: 'point',
        x: 'index',
        y: 'value',
        color: 'k'
      },
      dom: dom,
      coord: {
        type: 'polar'
      }
    };
    t = 1;
    c = polyjs.chart(spec1);
    return c.addHandler(function(type, e) {
      data = e.evtData;
      if (type === 'reset') {
        if (t === 1) {
          c.make(spec2);
          return t = 2;
        } else {
          c.make(spec1);
          return t = 1;
        }
      }
    });
  };

  this.examples.test_coordfacet = function(dom) {
    var c, spec1, spec2, t;
    spec1 = {
      layer: {
        data: data,
        type: 'point',
        x: 'index',
        y: 'value',
        color: 'k'
      },
      dom: dom
    };
    spec2 = {
      layer: {
        data: data,
        type: 'bar',
        x: 'bin(index,2)',
        y: 'value',
        color: 'k'
      },
      dom: dom,
      coord: {
        type: 'polar'
      },
      facet: {
        type: 'wrap',
        "var": 'k'
      }
    };
    t = 1;
    c = polyjs.chart(spec1);
    return c.addHandler(function(type, e) {
      data = e.evtData;
      if (type === 'reset') {
        if (t === 1) {
          c.make(spec2);
          return t = 2;
        } else {
          c.make(spec1);
          return t = 1;
        }
      }
    });
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var _ref;

  if ((_ref = this.examples) == null) {
    this.examples = {};
  }

  this.examples.line = function(dom) {
    var c, data, i, jsondata, redraw, spec;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'line',
          x: 'index',
          y: 'value'
        }, {
          data: data,
          type: 'point',
          x: 'index',
          y: 'value',
          id: 'index'
        }
      ],
      guides: {
        y: {
          type: 'num',
          min: 0,
          max: 10,
          ticks: [2, 4, 6, 8],
          labels: {
            2: 'Two',
            4: 'Four',
            6: 'Six',
            8: 'Eight'
          }
        }
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    redraw = function() {
      jsondata.shift();
      jsondata.push({
        index: i++,
        value: Math.random() * 10
      });
      spec.layers[0].data.update({
        data: jsondata
      });
      c.make(spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.line_missing2 = function(dom) {
    var data;
    data = polyjs.data({
      data: [
        {
          a: 2,
          b: null
        }, {
          a: void 0,
          b: 7
        }, {
          a: 9,
          b: null
        }, {
          a: 5
        }, {
          a: null,
          b: 3
        }, {
          a: void 0,
          b: null
        }
      ]
    });
    return polyjs.chart({
      layer: {
        data: data,
        type: 'line',
        x: 'a',
        y: 'b'
      },
      dom: dom
    });
  };

  this.examples.line_missing = function(dom) {
    var data;
    data = polyjs.data({
      data: [
        {
          a: 2,
          b: 4
        }, {
          a: 3,
          b: 7
        }, {
          a: 9,
          b: 10
        }, {
          a: 5
        }, {
          a: null,
          b: 3
        }, {
          a: void 0,
          b: null
        }
      ]
    });
    return polyjs.chart({
      layer: {
        data: data,
        type: 'line',
        x: 'a',
        y: 'b'
      },
      dom: dom
    });
  };

  this.examples.line_sum = function(dom) {
    var c, data, i, jsondata, next, redraw, s, spec;
    i = 0;
    s = 0;
    next = function() {
      var v;
      v = Math.random() * 10;
      s += v;
      return {
        index: i++,
        value: v,
        total: s
      };
    };
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push(next());
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'line',
          x: 'index',
          y: 'total'
        }, {
          data: data,
          type: 'point',
          x: 'index',
          y: 'total',
          id: 'index'
        }
      ],
      guides: {
        y: {
          min: 0
        }
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    redraw = function() {
      jsondata.shift();
      jsondata.push(next());
      spec.layers[0].data.update({
        data: jsondata
      });
      c.make(spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.line_flip = function(dom) {
    var c, data, i, jsondata, redraw, spec;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'line',
          x: 'index',
          y: 'value'
        }, {
          data: data,
          type: 'point',
          x: 'index',
          y: 'value',
          id: 'index'
        }
      ],
      guides: {
        y: {
          type: 'num',
          min: 0,
          max: 10,
          ticks: [2, 4, 6, 8],
          labels: {
            2: 'Two',
            4: 'Four',
            6: 'Six',
            8: 'Eight'
          }
        }
      },
      coord: {
        type: 'cartesian',
        flip: true
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    redraw = function() {
      jsondata.shift();
      jsondata.push({
        index: i++,
        value: Math.random() * 10
      });
      spec.layers[0].data.update({
        data: jsondata
      });
      c.make(spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.line_polar = function(dom) {
    var c, data, i, jsondata, redraw, spec;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'line',
          x: 'index',
          y: 'value'
        }, {
          data: data,
          type: 'point',
          x: 'index',
          y: 'value',
          id: 'index'
        }
      ],
      guides: {
        y: {
          type: 'num',
          min: 0,
          max: 10,
          ticks: [2, 4, 6, 8],
          labels: {
            2: 'Two',
            4: 'Four',
            6: 'Six',
            8: 'Eight'
          }
        }
      },
      coord: {
        type: 'polar'
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    redraw = function() {
      jsondata.shift();
      jsondata.push({
        index: i++,
        value: Math.random() * 10
      });
      spec.layers[0].data.update({
        data: jsondata
      });
      c.make(spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.line_polar_log = function(dom) {
    var c, data, i, jsondata, redraw, spec;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 1; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'line',
          x: 'index',
          y: 'value'
        }, {
          data: data,
          type: 'point',
          x: 'index',
          y: 'value',
          id: 'index'
        }
      ],
      guides: {
        y: {
          type: 'num',
          min: 0,
          max: 10,
          ticks: [2, 4, 6, 8],
          labels: {
            2: 'Two',
            4: 'Four',
            6: 'Six',
            8: 'Eight'
          }
        },
        x: {
          scale: {
            type: 'log'
          }
        }
      },
      coord: {
        type: 'polar'
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    redraw = function() {
      jsondata.shift();
      jsondata.push({
        index: i++,
        value: Math.random() * 10
      });
      spec.layers[0].data.update({
        data: jsondata
      });
      c.make(spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.line_polar_flip = function(dom) {
    var c, data, i, jsondata, redraw, spec;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'line',
          x: 'index',
          y: 'value'
        }, {
          data: data,
          type: 'point',
          x: 'index',
          y: 'value',
          id: 'index'
        }
      ],
      guides: {
        y: {
          type: 'num',
          min: 0,
          max: 10,
          ticks: [2, 4, 6, 8],
          labels: {
            2: 'Two',
            4: 'Four',
            6: 'Six',
            8: 'Eight'
          }
        }
      },
      coord: {
        type: 'polar',
        flip: true
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    redraw = function() {
      jsondata.shift();
      jsondata.push({
        index: i++,
        value: Math.random() * 10
      });
      spec.layers[0].data.update({
        data: jsondata
      });
      c.make(spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.line_static = function(dom) {
    var c, data, jsondata, spec;
    jsondata = [
      {
        a: 1,
        b: 5,
        c: 'A'
      }, {
        a: 3,
        b: 4,
        c: 'A'
      }, {
        a: 2,
        b: 3,
        c: 'A'
      }, {
        a: 2,
        b: 2,
        c: 'B'
      }, {
        a: 1,
        b: 4,
        c: 'B'
      }, {
        a: 2.2,
        b: 3,
        c: 'B'
      }, {
        a: 3,
        b: 3,
        c: 'B'
      }
    ];
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'line',
          x: 'a',
          y: 'b',
          color: 'c'
        }
      ],
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

  this.examples.line_date = function(dom) {
    var c, data, jsondata, spec;
    jsondata = [
      {
        a: '2012-01-01',
        b: 5,
        c: 'A'
      }, {
        a: '2012-01-02',
        b: 6,
        c: 'A'
      }, {
        a: '2012-01-03',
        b: 3,
        c: 'A'
      }, {
        a: '2012-01-04',
        b: 2,
        c: 'B'
      }, {
        a: '2012-01-05',
        b: 4,
        c: 'B'
      }, {
        a: '2012-01-06',
        b: 3,
        c: 'B'
      }, {
        a: '2012-01-07',
        b: 3,
        c: 'B'
      }
    ];
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'path',
          x: 'a',
          y: 'b'
        }
      ],
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

  this.examples.path = function(dom) {
    var c, data, jsondata, spec;
    jsondata = [
      {
        a: 1,
        b: 5,
        c: 'A'
      }, {
        a: 3,
        b: 4,
        c: 'A'
      }, {
        a: 2,
        b: 3,
        c: 'A'
      }, {
        a: 2,
        b: 2,
        c: 'B'
      }, {
        a: 1,
        b: 4,
        c: 'B'
      }, {
        a: 2.2,
        b: 3,
        c: 'B'
      }, {
        a: 3,
        b: 3,
        c: 'B'
      }
    ];
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'path',
          x: 'a',
          y: 'b',
          color: 'c'
        }, {
          data: data,
          type: 'point',
          x: 'a',
          y: 'b',
          color: 'c'
        }
      ],
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var _ref;

  if ((_ref = this.examples) == null) {
    this.examples = {};
  }

  this.examples.no_x_bar = function(dom) {
    var data, jsondata;
    jsondata = [
      {
        a: 1,
        b: 5,
        c: 'A'
      }, {
        a: 3,
        b: 4,
        c: 'A'
      }, {
        a: 2,
        b: 3,
        c: 'A'
      }, {
        a: 2,
        b: 2,
        c: 'B'
      }, {
        a: 1,
        b: 4,
        c: 'B'
      }, {
        a: 2.2,
        b: 3,
        c: 'B'
      }, {
        a: 3,
        b: 3,
        c: 'B'
      }
    ];
    data = polyjs.data({
      data: jsondata
    });
    return polyjs.chart({
      layers: [
        {
          data: data,
          type: 'bar',
          y: 'sum(a)',
          color: 'c'
        }
      ],
      dom: dom
    });
  };

  this.examples.no_x = function(dom) {
    var data, jsondata;
    jsondata = [
      {
        a: 1,
        b: 5,
        c: 'A'
      }, {
        a: 3,
        b: 4,
        c: 'A'
      }, {
        a: 2,
        b: 3,
        c: 'A'
      }, {
        a: 2,
        b: 2,
        c: 'B'
      }, {
        a: 1,
        b: 4,
        c: 'B'
      }, {
        a: 2.2,
        b: 3,
        c: 'B'
      }, {
        a: 3,
        b: 3,
        c: 'B'
      }
    ];
    data = polyjs.data({
      data: jsondata
    });
    return polyjs.chart({
      layers: [
        {
          data: data,
          type: 'point',
          y: 'a'
        }
      ],
      dom: dom
    });
  };

  this.examples.no_x_pie = function(dom) {
    var data, jsondata;
    jsondata = [
      {
        a: 1,
        b: 5,
        c: 'A'
      }, {
        a: 3,
        b: 4,
        c: 'A'
      }, {
        a: 2,
        b: 3,
        c: 'A'
      }, {
        a: 2,
        b: 2,
        c: 'B'
      }, {
        a: 1,
        b: 4,
        c: 'B'
      }, {
        a: 2.2,
        b: 3,
        c: 'B'
      }, {
        a: 3,
        b: 3,
        c: 'B'
      }
    ];
    data = polyjs.data({
      data: jsondata
    });
    return polyjs.chart({
      layers: [
        {
          data: data,
          type: 'bar',
          y: 'sum(a)',
          color: 'c'
        }
      ],
      coord: {
        type: 'polar'
      },
      guides: {
        y: {
          padding: 0,
          position: 'none'
        },
        x: {
          padding: 0,
          position: 'none'
        }
      },
      dom: dom
    });
  };

  this.examples.no_y = function(dom) {
    var data, jsondata;
    jsondata = [
      {
        a: 1,
        b: 5,
        c: 'A'
      }, {
        a: 3,
        b: 4,
        c: 'A'
      }, {
        a: 2,
        b: 3,
        c: 'A'
      }, {
        a: 2,
        b: 2,
        c: 'B'
      }, {
        a: 1,
        b: 4,
        c: 'B'
      }, {
        a: 2.2,
        b: 3,
        c: 'B'
      }, {
        a: 3,
        b: 3,
        c: 'B'
      }
    ];
    data = polyjs.data({
      data: jsondata
    });
    return polyjs.chart({
      layers: [
        {
          data: data,
          type: 'point',
          x: 'a'
        }
      ],
      dom: dom
    });
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var one, _ref;

  if ((_ref = this.examples) == null) {
    this.examples = {};
  }

  one = function() {
    return Math.random() * 10;
  };

  this.examples.point = function(dom) {
    var c, initspec, redraw, spec;
    spec = function() {
      var data, i, jsondata, sampleLayer;
      jsondata = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 10; i = ++_i) {
          _results.push({
            x: one(),
            y: one(),
            c: one()
          });
        }
        return _results;
      })();
      data = polyjs.data({
        data: jsondata
      });
      sampleLayer = {
        data: data,
        type: 'point',
        x: 'x',
        y: 'y',
        color: 'c'
      };
      if (Math.random() < 0.33) {
        sampleLayer.size = 'x';
      } else if (Math.random() < 0.5) {
        sampleLayer.size = 'c';
      }
      return {
        data: jsondata,
        spec: {
          layers: [sampleLayer],
          legendPosition: 'bottom',
          guides: {
            y: {
              position: 'right',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'Six',
                8: 'Eight'
              }
            },
            x: {
              position: 'top',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'Six',
                8: 'Eight'
              }
            },
            color: {
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'Six',
                8: 'Eight'
              }
            },
            size: {
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'Six',
                8: 'Eight'
              }
            }
          },
          dom: dom
        }
      };
    };
    initspec = spec().spec;
    c = polyjs.chart(initspec);
    redraw = function() {
      var newspec;
      newspec = spec();
      initspec.layers[0].data.update({
        data: newspec.data
      });
      c.make(newspec.spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.pointerr4 = function(dom) {
    var c, initspec, redraw, spec;
    spec = function() {
      var data, i, jsondata, sampleLayer;
      jsondata = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 10; i = ++_i) {
          _results.push({
            x: one(),
            y: one(),
            c: one()
          });
        }
        return _results;
      })();
      data = polyjs.data({
        data: jsondata
      });
      sampleLayer = {
        data: data,
        type: 'point',
        x: 'x',
        y: 'y',
        color: 'c'
      };
      if (Math.random() < 0.33) {
        sampleLayer.size = 'x';
      } else if (Math.random() < 0.5) {
        sampleLayer.size = 'c';
      }
      return {
        data: jsondata,
        spec: {
          layers: [sampleLayer],
          title: 'This is another title',
          legendPosition: 'bottom',
          guides: {
            y: {
              title: 'This is another long title',
              position: 'right',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'Six',
                8: 'Eight'
              }
            },
            x: {
              title: 'a',
              position: 'top',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'Six',
                8: 'Eight'
              }
            },
            color: {
              title: 'Even longer title',
              type: 'cat',
              min: 0,
              max: 40,
              ticks: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'six',
                8: 'Eight',
                10: 'jhasdjasdfjjhjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj this is some stuff at the end of it',
                12: 12,
                14: 14,
                16: 16,
                18: 18,
                20: 20
              }
            },
            size: {
              title: 'asd',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'Six'
              }
            }
          },
          dom: dom
        }
      };
    };
    initspec = spec().spec;
    c = polyjs.chart(initspec);
    redraw = function() {
      var newspec;
      newspec = spec();
      initspec.layers[0].data.update({
        data: newspec.data
      });
      c.make(newspec.spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.pointerr3_sizec = function(dom) {
    var c, initspec, redraw, spec;
    spec = function() {
      var data, i, jsondata, sampleLayer;
      jsondata = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 10; i = ++_i) {
          _results.push({
            x: one(),
            y: one(),
            c: one()
          });
        }
        return _results;
      })();
      data = polyjs.data({
        data: jsondata
      });
      sampleLayer = {
        data: data,
        type: 'point',
        x: 'x',
        y: 'y',
        color: 'c',
        size: 'c'
      };
      return {
        data: jsondata,
        spec: {
          layers: [sampleLayer],
          title: 'Main Title',
          legendPosition: 'top',
          guides: {
            y: {
              title: 'Y axis Title',
              position: 'right',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [1, 3, 5, 7],
              labels: {
                1: 'OneY',
                3: 'ThreeY',
                5: 'FiveY',
                7: 'SevenY'
              }
            },
            x: {
              title: 'X axis Title',
              position: 'top',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'TwoX',
                4: 'FourX',
                6: 'SixX',
                8: 'EightX'
              }
            },
            color: {
              title: 'Color title',
              type: 'cat',
              min: 0,
              max: 40,
              ticks: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'six',
                8: 'Eight',
                10: 'jhasdjasdfjjhjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj this is some stuff at the end of it',
                12: 12,
                14: 14,
                16: 16,
                18: 18,
                20: 20
              }
            },
            size: {
              title: 'Size Title',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'Six'
              }
            }
          },
          dom: dom
        }
      };
    };
    initspec = spec().spec;
    c = polyjs.chart(initspec);
    redraw = function() {
      var newspec;
      newspec = spec();
      initspec.layers[0].data.update({
        data: newspec.data
      });
      c.make(newspec.spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.pointerr3_sizenone = function(dom) {
    var c, initspec, redraw, spec;
    spec = function() {
      var data, i, jsondata, sampleLayer;
      jsondata = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 10; i = ++_i) {
          _results.push({
            x: one(),
            y: one(),
            c: one()
          });
        }
        return _results;
      })();
      data = polyjs.data({
        data: jsondata
      });
      sampleLayer = {
        data: data,
        type: 'point',
        x: 'x',
        y: 'y',
        color: 'c'
      };
      return {
        data: jsondata,
        spec: {
          layers: [sampleLayer],
          title: 'Main Title',
          legendPosition: 'top',
          guides: {
            y: {
              title: 'Y axis Title',
              position: 'right',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [1, 3, 5, 7],
              labels: {
                1: 'OneY',
                3: 'ThreeY',
                5: 'FiveY',
                7: 'SevenY'
              }
            },
            x: {
              title: 'X axis Title',
              position: 'top',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'TwoX',
                4: 'FourX',
                6: 'SixX',
                8: 'EightX'
              }
            },
            color: {
              title: 'Color title',
              type: 'cat',
              min: 0,
              max: 40,
              ticks: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'six',
                8: 'Eight',
                10: 'jhasdjasdfjjhjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj this is some stuff at the end of it',
                12: 12,
                14: 14,
                16: 16,
                18: 18,
                20: 20
              }
            },
            size: {
              title: 'Size Title',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'Six'
              }
            }
          },
          dom: dom
        }
      };
    };
    initspec = spec().spec;
    c = polyjs.chart(initspec);
    redraw = function() {
      var newspec;
      newspec = spec();
      initspec.layers[0].data.update({
        data: newspec.data
      });
      c.make(newspec.spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.pointerr3_sizex = function(dom) {
    var c, initspec, redraw, spec;
    spec = function() {
      var data, i, jsondata, sampleLayer;
      jsondata = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 10; i = ++_i) {
          _results.push({
            x: one(),
            y: one(),
            c: one()
          });
        }
        return _results;
      })();
      data = polyjs.data({
        data: jsondata
      });
      sampleLayer = {
        data: data,
        type: 'point',
        x: 'x',
        y: 'y',
        color: 'c',
        size: 'x'
      };
      return {
        data: jsondata,
        spec: {
          layers: [sampleLayer],
          title: 'Main Title',
          legendPosition: 'top',
          guides: {
            y: {
              title: 'Y axis Title',
              position: 'right',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [1, 3, 5, 7],
              labels: {
                1: 'OneY',
                3: 'ThreeY',
                5: 'FiveY',
                7: 'SevenY'
              }
            },
            x: {
              title: 'X axis Title',
              position: 'top',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'TwoX',
                4: 'FourX',
                6: 'SixX',
                8: 'EightX'
              }
            },
            color: {
              title: 'Color title',
              type: 'cat',
              min: 0,
              max: 40,
              ticks: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'six',
                8: 'Eight',
                10: 'jhasdjasdfjjhjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj this is some stuff at the end of it',
                12: 12,
                14: 14,
                16: 16,
                18: 18,
                20: 20
              }
            },
            size: {
              title: 'Size Title',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'Six'
              }
            }
          },
          dom: dom
        }
      };
    };
    initspec = spec().spec;
    c = polyjs.chart(initspec);
    redraw = function() {
      var newspec;
      newspec = spec();
      initspec.layers[0].data.update({
        data: newspec.data
      });
      c.make(newspec.spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.pointerr3_sizerand = function(dom) {
    var c, initspec, redraw, spec;
    spec = function() {
      var data, i, jsondata, sampleLayer;
      jsondata = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 10; i = ++_i) {
          _results.push({
            x: one(),
            y: one(),
            c: one()
          });
        }
        return _results;
      })();
      data = polyjs.data({
        data: jsondata
      });
      sampleLayer = {
        data: data,
        type: 'point',
        x: 'x',
        y: 'y',
        color: 'c'
      };
      if (Math.random() < 0.33) {
        sampleLayer.size = 'x';
      } else if (Math.random() < 0.5) {
        sampleLayer.size = 'c';
      }
      return {
        data: jsondata,
        spec: {
          layers: [sampleLayer],
          title: 'Main Title',
          legendPosition: 'top',
          guides: {
            y: {
              title: 'Y axis Title',
              position: 'right',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [1, 3, 5, 7],
              labels: {
                1: 'OneY',
                3: 'ThreeY',
                5: 'FiveY',
                7: 'SevenY'
              }
            },
            x: {
              title: 'X axis Title',
              position: 'top',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'TwoX',
                4: 'FourX',
                6: 'SixX',
                8: 'EightX'
              }
            },
            color: {
              title: 'Color title',
              type: 'cat',
              min: 0,
              max: 40,
              ticks: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'six',
                8: 'Eight',
                10: 'jhasdjasdfjjhjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj this is some stuff at the end of it',
                12: 12,
                14: 14,
                16: 16,
                18: 18,
                20: 20
              }
            },
            size: {
              title: 'Size Title',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'Six'
              }
            }
          },
          dom: dom
        }
      };
    };
    initspec = spec().spec;
    c = polyjs.chart(initspec);
    redraw = function() {
      var newspec;
      newspec = spec();
      initspec.layers[0].data.update({
        data: newspec.data
      });
      c.make(newspec.spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.pointerr2 = function(dom) {
    var c, initspec, redraw, spec;
    spec = function() {
      var data, i, jsondata, sampleLayer;
      jsondata = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 10; i = ++_i) {
          _results.push({
            x: one(),
            y: one(),
            c: one()
          });
        }
        return _results;
      })();
      data = polyjs.data({
        data: jsondata
      });
      sampleLayer = {
        data: data,
        type: 'point',
        x: 'x',
        y: 'y',
        color: 'c'
      };
      if (Math.random() < 0.33) {
        sampleLayer.size = 'x';
      } else if (Math.random() < 0.5) {
        sampleLayer.size = 'c';
      }
      return {
        data: jsondata,
        spec: {
          layers: [sampleLayer],
          title: 'This is another title',
          legendPosition: 'top',
          guides: {
            y: {
              title: 'This is another long title',
              position: 'right',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'Six',
                8: 'Eight'
              }
            },
            x: {
              title: 'a',
              position: 'top',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'Six',
                8: 'Eight'
              }
            },
            color: {
              title: 'Even longer title',
              type: 'cat',
              min: 0,
              max: 40,
              ticks: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'six',
                8: 'Eight',
                10: 'jhasdjasdfjjhjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj this is some stuff at the end of it',
                12: 12,
                14: 14,
                16: 16,
                18: 18,
                20: 20
              }
            },
            size: {
              title: 'asd',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'Six'
              }
            }
          },
          dom: dom
        }
      };
    };
    initspec = spec().spec;
    c = polyjs.chart(initspec);
    redraw = function() {
      var newspec;
      newspec = spec();
      initspec.layers[0].data.update({
        data: newspec.data
      });
      c.make(newspec.spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.pointerr1 = function(dom) {
    var c, initspec, redraw, spec;
    spec = function() {
      var data, i, jsondata, sampleLayer;
      jsondata = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 10; i = ++_i) {
          _results.push({
            x: one(),
            y: one(),
            c: one()
          });
        }
        return _results;
      })();
      data = polyjs.data({
        data: jsondata
      });
      sampleLayer = {
        data: data,
        type: 'point',
        x: 'x',
        y: 'y',
        color: 'c'
      };
      if (Math.random() < 0.33) {
        sampleLayer.size = 'x';
      } else if (Math.random() < 0.5) {
        sampleLayer.size = 'c';
      }
      return {
        data: jsondata,
        spec: {
          layers: [sampleLayer],
          title: 'This is another title',
          legendPosition: 'right',
          guides: {
            y: {
              title: 'This is another long title',
              position: 'right',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'Six',
                8: 'Eight'
              }
            },
            x: {
              title: 'a',
              position: 'top',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'Six',
                8: 'Eight'
              }
            },
            color: {
              title: 'Even longer title',
              type: 'cat',
              min: 0,
              max: 40,
              ticks: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'six',
                8: 'Eight',
                10: 'jhasdjasdfjjhjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj this is some stuff at the end of it',
                12: 12,
                14: 14,
                16: 16,
                18: 18,
                20: 20
              }
            },
            size: {
              title: 'asd',
              type: 'num',
              min: 0,
              max: 10,
              ticks: [2, 4, 6, 8],
              labels: {
                2: 'Two',
                4: 'Four',
                6: 'Six'
              }
            }
          },
          dom: dom
        }
      };
    };
    initspec = spec().spec;
    c = polyjs.chart(initspec);
    redraw = function() {
      var newspec;
      newspec = spec();
      initspec.layers[0].data.update({
        data: newspec.data
      });
      c.make(newspec.spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.point_missing = function(dom) {
    var data;
    data = polyjs.data({
      data: [
        {
          a: 2,
          b: 4
        }, {
          a: 3,
          b: 7
        }, {
          a: 9,
          b: 10
        }, {
          a: 5
        }, {
          a: null,
          b: 3
        }, {
          a: void 0,
          b: null
        }
      ]
    });
    return polyjs.chart({
      layer: {
        data: data,
        type: 'point',
        x: 'a',
        y: 'b'
      },
      dom: dom
    });
  };

  this.examples.point_sampled = function(dom) {
    var c, data, i, jsondata, redraw;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 1000; i = ++_i) {
        _results.push({
          x: one(),
          y: one(),
          c: one()
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    c = polyjs.chart({
      layer: {
        data: data,
        type: 'point',
        x: 'x',
        y: 'y',
        sample: 50
      },
      dom: dom
    });
    redraw = function() {
      c.make();
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.point2 = function(dom) {
    var c, data, jsondata, sampleLayer, spec;
    jsondata = [
      {
        x: 'A',
        y: 2
      }, {
        x: 'B',
        y: 3
      }, {
        x: 'C',
        y: 1
      }
    ];
    data = polyjs.data({
      data: jsondata
    });
    sampleLayer = {
      dom: dom,
      data: data,
      type: 'point',
      x: 'x',
      y: 'y',
      size: {
        'const': 10
      },
      color: 'x'
    };
    spec = {
      layers: [sampleLayer],
      dom: dom,
      legendPosition: 'bottom'
    };
    return c = polyjs.chart(spec);
  };

  this.examples.point3 = function(dom) {
    var c, data, jsondata, sampleLayer, spec;
    jsondata = [
      {
        x: 'A',
        y: 'X'
      }, {
        x: 'B',
        y: 'Y'
      }, {
        x: 'C',
        y: 'Z'
      }
    ];
    data = polyjs.data({
      data: jsondata
    });
    sampleLayer = {
      data: data,
      type: 'point',
      x: 'x',
      y: 'y',
      color: {
        "const": '#E01B6A'
      }
    };
    spec = {
      layers: [sampleLayer],
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

  this.examples.point3_flip = function(dom) {
    var c, data, jsondata, sampleLayer, spec;
    jsondata = [
      {
        x: 'A',
        y: 'X'
      }, {
        x: 'B',
        y: 'Y'
      }, {
        x: 'C',
        y: 'Z'
      }
    ];
    data = polyjs.data({
      data: jsondata
    });
    sampleLayer = {
      data: data,
      type: 'point',
      x: 'x',
      y: 'y',
      color: {
        "const": '#E01B6A'
      }
    };
    spec = {
      layers: [sampleLayer],
      coord: {
        type: 'polar',
        flip: true
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    return c.addHandler(function(type, data) {
      if (type === 'click' || type === 'reset') {
        console.log(data);
        return alert(type);
      }
    });
  };

  this.examples.errors = function(dom) {
    var data2;
    data2 = {};
    return polyjs.chart({
      render: false,
      layer: {
        data: data2,
        type: 'point',
        x: 'a',
        y: 'b'
      }
    });
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var data, _ref;

  data = {
    subcontinent: ["Africa", "Africa", "Africa", "Africa", "Africa", "Africa", "Africa", "Africa", "Africa", "Africa", "Africa", "Africa", "Africa", "Africa", "Africa", "Africa", "Africa", "Africa", "Africa", "Africa", "Africa", "The Americas", "The Americas", "The Americas", "The Americas", "The Americas", "The Americas", "The Americas", "The Americas", "The Americas", "The Americas", "The Americas", "The Americas", "The Americas", "The Americas", "The Americas", "The Americas", "The Americas", "The Americas", "The Americas", "The Americas", "The Americas", "North America", "North America", "North America", "North America", "North America", "North America", "North America", "North America", "North America", "North America", "North America", "North America", "North America", "North America", "North America", "North America", "North America", "North America", "North America", "North America", "North America", "South America", "South America", "South America", "South America", "South America", "South America", "South America", "South America", "South America", "South America", "South America", "South America", "South America", "South America", "South America", "South America", "South America", "South America", "South America", "South America", "South America", "Central America", "Central America", "Central America", "Central America", "Central America", "Central America", "Central America", "Central America", "Central America", "Central America", "Central America", "Central America", "Central America", "Central America", "Central America", "Central America", "Central America", "Central America", "Central America", "Central America", "Central America", "Isthmic Central America", "Isthmic Central America", "Isthmic Central America", "Isthmic Central America", "Isthmic Central America", "Isthmic Central America", "Isthmic Central America", "Isthmic Central America", "Isthmic Central America", "Isthmic Central America", "Isthmic Central America", "Isthmic Central America", "Isthmic Central America", "Isthmic Central America", "Isthmic Central America", "Isthmic Central America", "Isthmic Central America", "Isthmic Central America", "Isthmic Central America", "Isthmic Central America", "Isthmic Central America", "Greater Antilles", "Greater Antilles", "Greater Antilles", "Greater Antilles", "Greater Antilles", "Greater Antilles", "Greater Antilles", "Greater Antilles", "Greater Antilles", "Greater Antilles", "Greater Antilles", "Greater Antilles", "Greater Antilles", "Greater Antilles", "Greater Antilles", "Greater Antilles", "Greater Antilles", "Greater Antilles", "Greater Antilles", "Greater Antilles", "Greater Antilles", "Lesser Antilles", "Lesser Antilles", "Lesser Antilles", "Lesser Antilles", "Lesser Antilles", "Lesser Antilles", "Lesser Antilles", "Lesser Antilles", "Lesser Antilles", "Lesser Antilles", "Lesser Antilles", "Lesser Antilles", "Lesser Antilles", "Lesser Antilles", "Lesser Antilles", "Lesser Antilles", "Lesser Antilles", "Lesser Antilles", "Lesser Antilles", "Lesser Antilles", "Lesser Antilles", "Asia", "Asia", "Asia", "Asia", "Asia", "Asia", "Asia", "Asia", "Asia", "Asia", "Asia", "Asia", "Asia", "Asia", "Asia", "Asia", "Asia", "Asia", "Asia", "Asia", "Asia", "Europe", "Europe", "Europe", "Europe", "Europe", "Europe", "Europe", "Europe", "Europe", "Europe", "Europe", "Europe", "Europe", "Europe", "Europe", "Europe", "Europe", "Europe", "Europe", "Europe", "Europe", "Western Europe", "Western Europe", "Western Europe", "Western Europe", "Western Europe", "Western Europe", "Western Europe", "Western Europe", "Western Europe", "Western Europe", "Western Europe", "Western Europe", "Western Europe", "Western Europe", "Western Europe", "Western Europe", "Western Europe", "Western Europe", "Western Europe", "Western Europe", "Western Europe", "Eastern Europe", "Eastern Europe", "Eastern Europe", "Eastern Europe", "Eastern Europe", "Eastern Europe", "Eastern Europe", "Eastern Europe", "Eastern Europe", "Eastern Europe", "Eastern Europe", "Eastern Europe", "Eastern Europe", "Eastern Europe", "Eastern Europe", "Eastern Europe", "Eastern Europe", "Eastern Europe", "Eastern Europe", "Eastern Europe", "Eastern Europe", "Oceania", "Oceania", "Oceania", "Oceania", "Oceania", "Oceania", "Oceania", "Oceania", "Oceania", "Oceania", "Oceania", "Oceania", "Oceania", "Oceania", "Oceania", "Oceania", "Oceania", "Oceania", "Oceania", "Oceania", "Oceania", "(Former) Soviet Union", "(Former) Soviet Union", "(Former) Soviet Union", "(Former) Soviet Union", "(Former) Soviet Union", "(Former) Soviet Union", "(Former) Soviet Union", "(Former) Soviet Union", "(Former) Soviet Union", "(Former) Soviet Union", "(Former) Soviet Union", "(Former) Soviet Union", "(Former) Soviet Union", "(Former) Soviet Union", "(Former) Soviet Union", "(Former) Soviet Union", "(Former) Soviet Union", "(Former) Soviet Union", "(Former) Soviet Union", "(Former) Soviet Union", "(Former) Soviet Union"],
    year: ["1950", "1955", "1960", "1965", "1970", "1975", "1980", "1985", "1990", "1995", "2000", "2005", "2010", "2015", "2020", "2025", "2030", "2035", "2040", "2045", "2050", "1950", "1955", "1960", "1965", "1970", "1975", "1980", "1985", "1990", "1995", "2000", "2005", "2010", "2015", "2020", "2025", "2030", "2035", "2040", "2045", "2050", "1950", "1955", "1960", "1965", "1970", "1975", "1980", "1985", "1990", "1995", "2000", "2005", "2010", "2015", "2020", "2025", "2030", "2035", "2040", "2045", "2050", "1950", "1955", "1960", "1965", "1970", "1975", "1980", "1985", "1990", "1995", "2000", "2005", "2010", "2015", "2020", "2025", "2030", "2035", "2040", "2045", "2050", "1950", "1955", "1960", "1965", "1970", "1975", "1980", "1985", "1990", "1995", "2000", "2005", "2010", "2015", "2020", "2025", "2030", "2035", "2040", "2045", "2050", "1950", "1955", "1960", "1965", "1970", "1975", "1980", "1985", "1990", "1995", "2000", "2005", "2010", "2015", "2020", "2025", "2030", "2035", "2040", "2045", "2050", "1950", "1955", "1960", "1965", "1970", "1975", "1980", "1985", "1990", "1995", "2000", "2005", "2010", "2015", "2020", "2025", "2030", "2035", "2040", "2045", "2050", "1950", "1955", "1960", "1965", "1970", "1975", "1980", "1985", "1990", "1995", "2000", "2005", "2010", "2015", "2020", "2025", "2030", "2035", "2040", "2045", "2050", "1950", "1955", "1960", "1965", "1970", "1975", "1980", "1985", "1990", "1995", "2000", "2005", "2010", "2015", "2020", "2025", "2030", "2035", "2040", "2045", "2050", "1950", "1955", "1960", "1965", "1970", "1975", "1980", "1985", "1990", "1995", "2000", "2005", "2010", "2015", "2020", "2025", "2030", "2035", "2040", "2045", "2050", "1950", "1955", "1960", "1965", "1970", "1975", "1980", "1985", "1990", "1995", "2000", "2005", "2010", "2015", "2020", "2025", "2030", "2035", "2040", "2045", "2050", "1950", "1955", "1960", "1965", "1970", "1975", "1980", "1985", "1990", "1995", "2000", "2005", "2010", "2015", "2020", "2025", "2030", "2035", "2040", "2045", "2050", "1950", "1955", "1960", "1965", "1970", "1975", "1980", "1985", "1990", "1995", "2000", "2005", "2010", "2015", "2020", "2025", "2030", "2035", "2040", "2045", "2050", "1950", "1955", "1960", "1965", "1970", "1975", "1980", "1985", "1990", "1995", "2000", "2005", "2010", "2015", "2020", "2025", "2030", "2035", "2040", "2045", "2050"],
    population: ["227991", "253894", "285185", "322012", "365970", "416603", "479022", "554360", "632182", "715401", "807046", "911699", "1027923", "1154023", "1288647", "1431595", "1583358", "1744030", "1912953", "2088833", "2270576", "331388", "370348", "415818", "463605", "511080", "561009", "612589", "665149", "720304", "778664", "833295", "883416", "931740", "980248", "1027266", "1071772", "1112810", "1149849", "1182795", "1211773", "1237099", "194391", "214081", "236862", "258784", "278561", "299408", "320222", "340692", "362389", "388912", "413261", "434406", "454574", "476223", "497939", "519172", "539481", "558722", "577010", "594558", "611651", "112041", "128335", "147381", "168877", "192083", "216848", "242905", "270302", "298055", "324126", "348881", "372908", "396612", "419117", "440136", "459402", "476529", "491232", "503317", "512659", "519240", "24955", "27932", "31576", "35944", "40436", "44753", "49462", "54155", "59859", "65626", "71153", "76101", "80553", "84908", "89191", "93198", "96800", "99895", "102468", "104556", "106208", "9263", "10767", "12613", "14764", "17070", "19112", "21829", "24487", "28121", "31760", "35191", "38244", "41438", "44533", "47522", "50372", "53011", "55379", "57463", "59274", "60828", "14838", "16222", "17945", "20084", "22172", "24352", "26296", "28263", "30272", "32329", "34384", "36215", "37397", "38595", "39836", "40946", "41875", "42580", "43058", "43333", "43439", "854", "944", "1017", "1097", "1195", "1290", "1338", "1405", "1467", "1536", "1578", "1642", "1718", "1780", "1833", "1879", "1914", "1936", "1948", "1949", "1942", "1437565", "1567779", "1720291", "1911899", "2158832", "2413320", "2644214", "2907011", "3189623", "3451305", "3693640", "3919408", "4138387", "4347495", "4543042", "4715451", "4861192", "4981352", "5078184", "5153038", "5205799", "542524", "574401", "604637", "634344", "656687", "677224", "693651", "707001", "720792", "727748", "728655", "731102", "733820", "733872", "732205", "727755", "721027", "712547", "702501", "690705", "677068", "305120", "314846", "326662", "341302", "352720", "362291", "368047", "371734", "378472", "386652", "392611", "402246", "411197", "417598", "423163", "426909", "428978", "429455", "428395", "425798", "421729", "237404", "259554", "277975", "293041", "303967", "314933", "325604", "335267", "342320", "341096", "336044", "328856", "322623", "316274", "309042", "300846", "292050", "283092", "274106", "264907", "255339", "12443", "13934", "15568", "17313", "19181", "21062", "22477", "24308", "26340", "28309", "30334", "32571", "34844", "37041", "39155", "41144", "42954", "44560", "45978", "47229", "48338", "179571", "195613", "213780", "230513", "242478", "254519", "265984", "278184", "289016", "291782", "289818", "286486", "284962", "283884", "282169", "279467", "276061", "272426", "268760", "264796", "260223"]
  };

  if ((_ref = this.examples) == null) {
    this.examples = {};
  }

  this.examples.population = function(dom, dom2, dom3) {
    var breakdown, breakdown_spec, polyd, show_breakdown, show_country, today, today_spec, yearly, yearly_spec, yscale_toggle;
    polyd = polyjs.data({
      data: data
    });
    polyd.derive((function(x) {
      if (x.year < 2012) {
        return 'actual';
      } else {
        return 'estimate';
      }
    }), 'type');
    today_spec = {
      layer: {
        data: polyd,
        type: 'bar',
        x: {
          "var": 'subcontinent',
          sort: 'population',
          asc: false
        },
        y: 'population',
        color: 'subcontinent',
        id: 'subcontinent',
        filter: {
          year: {
            "in": [2010]
          }
        }
      },
      legendPosition: 'none',
      guides: {
        x: {
          numticks: 50
        },
        color: {
          scale: function(x) {
            return 'steelblue';
          }
        }
      },
      coord: {
        type: 'cartesian',
        flip: true
      },
      dom: dom,
      title: 'World Population By (Sub)continent 2010',
      width: 300,
      height: 350
    };
    today = polyjs.chart(today_spec);
    yearly_spec = {
      layers: [
        {
          data: polyd,
          type: 'line',
          x: 'year',
          y: 'sum(population)',
          size: {
            "const": 5
          },
          color: {
            "const": '#CCC'
          }
        }, {
          data: polyd,
          type: 'point',
          x: 'year',
          y: 'sum(population)',
          color: 'type'
        }
      ],
      guides: {
        x: {
          formatter: function(year) {
            return "" + year;
          }
        },
        y: {
          min: 0,
          max: 12500000
        },
        color: {
          scale: function(t) {
            if (t === 'actual') {
              return '#222';
            } else {
              return 'brown';
            }
          }
        }
      },
      title: "Population growth of the World (click chart to zoom)",
      dom: dom2,
      width: 550,
      height: 350
    };
    yearly = polyjs.chart(yearly_spec);
    breakdown_spec = {
      layer: {
        data: polyd,
        type: 'bar',
        y: {
          "var": 'population',
          sort: 'population'
        },
        color: {
          "var": 'subcontinent',
          sort: 'population'
        },
        filter: {
          year: {
            "in": [2010]
          }
        }
      },
      guides: {
        x: {
          position: 'none'
        },
        color: {
          numticks: 50
        }
      },
      coord: {
        type: 'cartesian',
        flip: 'true'
      },
      title: 'Population Breakdown in 2010',
      dom: dom3,
      width: 850,
      height: 250,
      paddingLeft: 20
    };
    breakdown = polyjs.chart(breakdown_spec);
    show_country = function(type, e) {
      var filter, layer, _i, _j, _len, _len1, _ref1, _ref2;
      if (type === 'click' || type === 'guide-click') {
        data = e.evtData;
        if (!data.subcontinent) {
          return;
        }
        filter = {
          subcontinent: data.subcontinent
        };
        _ref1 = yearly_spec.layers;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          layer = _ref1[_i];
          layer.filter = filter;
        }
        yearly_spec.title = "Population growth of " + data.subcontinent["in"][0] + " (click chart to zoom)";
        yearly_spec.guides.y.min = 0;
        yearly_spec.guides.y.max = 5500000;
        yearly.make(yearly_spec);
        today_spec.guides.color.scale = function(x) {
          if (x === data.subcontinent["in"][0]) {
            return 'red';
          } else {
            return 'steelblue';
          }
        };
        return today.make(today_spec);
      } else if (type === 'reset') {
        _ref2 = yearly_spec.layers;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          layer = _ref2[_j];
          delete layer.filter;
        }
        yearly_spec.title = "Population growth of the World (click chart to zoom)";
        yearly_spec.guides.y.min = 0;
        yearly_spec.guides.y.max = 12500000;
        yearly.make(yearly_spec);
        today_spec.guides.color.scale = function(x) {
          return 'steelblue';
        };
        return today.make(today_spec);
      }
    };
    show_breakdown = function(type, e) {
      var filter;
      if (type === 'click') {
        data = e.evtData;
        if (data.year) {
          filter = {
            year: data.year
          };
          breakdown_spec.title = "Population Breakdown in " + data.year["in"][0];
          breakdown_spec.layer.filter = filter;
          return breakdown.make(breakdown_spec);
        }
      }
    };
    yscale_toggle = function() {
      var max, min;
      min = 0;
      max = 5500000;
      return function(type, e) {
        if (type === 'reset') {
          if (yearly_spec.guides.y.max != null) {
            min = yearly_spec.guides.y.min;
            delete yearly_spec.guides.y.min;
            max = yearly_spec.guides.y.max;
            delete yearly_spec.guides.y.max;
          } else {
            yearly_spec.guides.y.min = min;
            yearly_spec.guides.y.max = max;
          }
          return yearly.make(yearly_spec);
        }
      };
    };
    today.addHandler(show_country);
    yearly.addHandler(yscale_toggle());
    yearly.addHandler(show_breakdown);
    return breakdown.addHandler(show_country);
  };

  this.examples.populationerr1 = function(dom, dom2, dom3) {
    var breakdown, breakdown_spec, polyd, show_breakdown, show_country, today, today_spec, yearly, yearly_spec, yscale_toggle;
    polyd = polyjs.data({
      data: data
    });
    polyd.derive((function(x) {
      if (x.year < 2012) {
        return 'actual';
      } else {
        return 'estimate';
      }
    }), 'type');
    today_spec = {
      layer: {
        data: polyd,
        type: 'bar',
        x: {
          "var": 'subcontinent',
          sort: 'population',
          asc: false
        },
        y: 'population',
        color: 'subcontinent',
        id: 'subcontinent',
        filter: {
          year: {
            "in": [2010]
          }
        }
      },
      legendPosition: 'top',
      guides: {
        x: {
          numticks: 50
        },
        color: {
          scale: function(x) {
            return 'steelblue';
          }
        }
      },
      coord: {
        type: 'cartesian',
        flip: true
      },
      dom: dom,
      title: 'World Population By (Sub)continent 2010',
      width: 400,
      height: 400
    };
    today = polyjs.chart(today_spec);
    yearly_spec = {
      layers: [
        {
          data: polyd,
          type: 'line',
          x: 'year',
          y: 'sum(population)',
          size: {
            "const": 5
          },
          color: {
            "const": '#CCC'
          }
        }, {
          data: polyd,
          type: 'point',
          x: 'year',
          y: 'sum(population)',
          color: 'type'
        }
      ],
      guides: {
        x: {
          formatter: function(year) {
            return "" + year;
          }
        },
        y: {
          min: 0,
          max: 12500000
        },
        color: {
          scale: function(t) {
            if (t === 'actual') {
              return '#222';
            } else {
              return 'brown';
            }
          }
        }
      },
      title: "Population growth of the World (click chart to zoom)",
      dom: dom2,
      width: 700,
      height: 400
    };
    yearly = polyjs.chart(yearly_spec);
    breakdown_spec = {
      layer: {
        data: polyd,
        type: 'bar',
        y: {
          "var": 'population',
          sort: 'population'
        },
        color: {
          "var": 'subcontinent',
          sort: 'population'
        },
        filter: {
          year: {
            "in": [2010]
          }
        }
      },
      guides: {
        x: {
          position: 'none'
        },
        color: {
          numticks: 50
        }
      },
      coord: {
        type: 'cartesian',
        flip: 'true'
      },
      title: 'Population Breakdown in 2010',
      dom: dom3,
      width: 1100,
      height: 250,
      paddingLeft: 20
    };
    breakdown = polyjs.chart(breakdown_spec);
    show_country = function(type, e) {
      var filter, layer, _i, _j, _len, _len1, _ref1, _ref2;
      if (type === 'click' || type === 'guide-click') {
        data = e.evtData;
        if (!data.subcontinent) {
          return;
        }
        filter = {
          subcontinent: data.subcontinent
        };
        _ref1 = yearly_spec.layers;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          layer = _ref1[_i];
          layer.filter = filter;
        }
        yearly_spec.title = "Population growth of " + data.subcontinent["in"][0] + " (click chart to zoom)";
        yearly_spec.guides.y.min = 0;
        yearly_spec.guides.y.max = 5500000;
        yearly.make(yearly_spec);
        today_spec.guides.color.scale = function(x) {
          if (x === data.subcontinent["in"][0]) {
            return 'red';
          } else {
            return 'steelblue';
          }
        };
        return today.make(today_spec);
      } else if (type === 'reset') {
        _ref2 = yearly_spec.layers;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          layer = _ref2[_j];
          delete layer.filter;
        }
        yearly_spec.title = "Population growth of the World (click chart to zoom)";
        yearly_spec.guides.y.min = 0;
        yearly_spec.guides.y.max = 12500000;
        yearly.make(yearly_spec);
        today_spec.guides.color.scale = function(x) {
          return 'steelblue';
        };
        return today.make(today_spec);
      }
    };
    show_breakdown = function(type, e) {
      var filter;
      if (type === 'click') {
        data = e.evtData;
        if (data.year) {
          filter = {
            year: data.year
          };
          breakdown_spec.title = "Population Breakdown in " + data.year["in"][0];
          breakdown_spec.layer.filter = filter;
          return breakdown.make(breakdown_spec);
        }
      }
    };
    yscale_toggle = function() {
      var max, min;
      min = 0;
      max = 5500000;
      return function(type, e) {
        if (type === 'reset') {
          if (yearly_spec.guides.y.max != null) {
            min = yearly_spec.guides.y.min;
            delete yearly_spec.guides.y.min;
            max = yearly_spec.guides.y.max;
            delete yearly_spec.guides.y.max;
          } else {
            yearly_spec.guides.y.min = min;
            yearly_spec.guides.y.max = max;
          }
          return yearly.make(yearly_spec);
        }
      };
    };
    today.addHandler(show_country);
    yearly.addHandler(yscale_toggle());
    yearly.addHandler(show_breakdown);
    return breakdown.addHandler(show_country);
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var _ref;

  if ((_ref = this.examples) == null) {
    this.examples = {};
  }

  this.examples.popy_polar = function(dom) {
    var c, data;
    data = polyjs.data({
      data: [
        {
          gr: "Overall",
          p: 60,
          colgrp: '1'
        }, {
          gr: "Grade 9",
          p: 10,
          colgrp: '2'
        }, {
          gr: "Grade 10",
          p: 40,
          colgrp: '2'
        }, {
          gr: "Grade 11",
          p: 50,
          colgrp: '2'
        }, {
          gr: "Grade 12",
          p: 70,
          colgrp: '2'
        }
      ]
    });
    return c = polyjs.chart({
      layers: [
        {
          data: data,
          type: 'bar',
          y: 'p',
          color: 'colgrp'
        }
      ],
      facet: {
        type: 'wrap',
        "var": 'gr',
        cols: 5,
        size: 20,
        formatter: function(index) {
          return index.gr;
        }
      },
      coord: {
        type: 'polar'
      },
      guides: {
        y: {
          min: 0,
          max: 100,
          position: 'none',
          padding: 0
        },
        x: {
          position: 'none',
          padding: 0
        }
      },
      dom: dom,
      height: 150,
      width: 600,
      title: 'Percentage of student completed 40 hours'
    });
  };

  this.examples.popy_gr = function(dom) {
    var c, data;
    data = polyjs.data({
      data: [
        {
          gr: "Grade 9",
          p: 10
        }, {
          gr: "Grade 10",
          p: 40
        }, {
          gr: "Grade 11",
          p: 50
        }, {
          gr: "Grade 12",
          p: 70
        }
      ],
      meta: {
        gr: {
          type: 'cat'
        }
      }
    });
    data.derive((function(x) {
      return x.p + 5;
    }), 'p_10');
    data.derive((function(x) {
      return "" + x.p + "%";
    }), 'percent');
    return c = polyjs.chart({
      layers: [
        {
          data: data,
          type: 'bar',
          x: 'gr',
          y: 'p',
          color: {
            "const": '#ABC'
          }
        }, {
          data: data,
          type: 'text',
          x: 'gr',
          y: 'p_10',
          text: 'percent',
          color: {
            "const": 'black'
          }
        }
      ],
      guides: {
        y: {
          min: 0,
          max: 100,
          title: "Percentage"
        },
        x: {
          levels: ["Grade 9", "Grade 10", "Grade 11", "Grade 12"],
          title: 'Grade'
        }
      },
      dom: dom,
      title: 'Percentage of student completed 40 hours'
    });
  };

  this.examples.popy_interests = function(dom) {
    var c, data;
    data = polyjs.data({
      data: [
        {
          gr: "Health Care",
          num: 500
        }, {
          gr: "Events",
          num: 400
        }, {
          gr: "Recreation",
          num: 370
        }, {
          gr: "Technology",
          num: 370
        }, {
          gr: "Animal/Pets",
          num: 70
        }, {
          gr: "Senior Services",
          num: 30
        }
      ]
    });
    data.derive((function(x) {
      return x.num + 40;
    }), 'p_50');
    data.derive((function(x) {
      return "" + (Math.round(x.num / 800 * 100)) + "%";
    }), 'percent');
    return c = polyjs.chart({
      layers: [
        {
          data: data,
          type: 'bar',
          x: {
            "var": 'gr',
            sort: 'num'
          },
          y: 'num'
        }, {
          data: data,
          type: 'text',
          x: 'gr',
          y: 'p_50',
          text: 'percent',
          color: {
            "const": 'black'
          }
        }
      ],
      dom: dom,
      guide: {
        y: {
          min: 0,
          max: 700
        }
      },
      coord: {
        type: 'cartesian',
        flip: true
      },
      title: 'Student Interests'
    });
  };

  this.examples.popy_intexp = function(dom) {
    var c, data;
    data = polyjs.data({
      data: [
        {
          gr: "Health Care",
          num: 500,
          type: 'Interest'
        }, {
          gr: "Events",
          num: 400,
          type: 'Interest'
        }, {
          gr: "Recreation",
          num: 370,
          type: 'Interest'
        }, {
          gr: "Technology",
          num: 370,
          type: 'Interest'
        }, {
          gr: "Animal/Pets",
          num: 70,
          type: 'Interest'
        }, {
          gr: "Senior Services",
          num: 30,
          type: 'Interest'
        }, {
          gr: "Health Care",
          num: 500,
          type: 'Org Type'
        }, {
          gr: "Events",
          num: 400,
          type: 'Org Type'
        }, {
          gr: "Recreation",
          num: 370,
          type: 'Org Type'
        }, {
          gr: "Technology",
          num: 370,
          type: 'Org Type'
        }, {
          gr: "Animal/Pets",
          num: 70,
          type: 'Org Type'
        }, {
          gr: "Senior Services",
          num: 30,
          type: 'Org Type'
        }
      ]
    });
    data.derive((function(x) {
      return x.num + 50;
    }), 'p_50');
    data.derive((function(x) {
      return "" + (Math.round(x.num / 800 * 100)) + "%";
    }), 'percent');
    return c = polyjs.chart({
      layers: [
        {
          data: data,
          type: 'bar',
          x: {
            "var": 'gr',
            sort: 'num'
          },
          y: 'num',
          color: 'type',
          position: 'dodge'
        }, {
          data: data,
          type: 'text',
          x: 'gr',
          y: 'p_50',
          text: 'percent',
          color: {
            "const": 'black'
          }
        }
      ],
      dom: dom,
      guide: {
        y: {
          min: 0,
          max: 700
        }
      },
      coord: {
        type: 'cartesian',
        flip: true
      },
      title: 'Student Interests'
    });
  };

  this.examples.popy_rating = function(dom) {
    var c, data;
    data = polyjs.data({
      data: [
        {
          gr: "Excellent",
          num: 500
        }, {
          gr: "Very Good",
          num: 400
        }, {
          gr: "Average",
          num: 370
        }, {
          gr: "Poor",
          num: 370
        }, {
          gr: "Terrible",
          num: 70
        }
      ]
    });
    return c = polyjs.chart({
      layers: [
        {
          data: data,
          type: 'bar',
          x: {
            "var": 'gr',
            sort: 'num'
          },
          y: 'num'
        }
      ],
      dom: dom,
      guide: {
        y: {
          min: 0,
          max: 700
        }
      },
      coord: {
        type: 'cartesian',
        flip: true
      },
      title: 'Volunteer Experience Rating'
    });
  };

  this.examples.popy_rating_pie = function(dom) {
    var c, data;
    data = polyjs.data({
      data: [
        {
          gr: "Excellent",
          num: 500
        }, {
          gr: "Very Good",
          num: 400
        }, {
          gr: "Average",
          num: 370
        }, {
          gr: "Poor",
          num: 370
        }, {
          gr: "Terrible",
          num: 70
        }
      ]
    });
    return c = polyjs.chart({
      layers: [
        {
          data: data,
          type: 'bar',
          y: 'num',
          color: 'gr'
        }
      ],
      dom: dom,
      coord: {
        type: 'polar'
      },
      guide: {
        x: {
          position: 'none'
        },
        y: {
          position: 'none'
        },
        color: {
          levels: ['Excellent', 'Very Good', 'Average', 'Poor', 'Terrible']
        }
      },
      title: 'Volunteer Experience Rating',
      width: 400,
      height: 300
    });
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var _ref;

  if ((_ref = this.examples) == null) {
    this.examples = {};
  }

  this.examples.spline = function(dom) {
    var c, data, i, jsondata, redraw, spec;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'spline',
          x: 'index',
          y: 'value'
        }, {
          data: data,
          type: 'point',
          x: 'index',
          y: 'value',
          id: 'index'
        }
      ],
      guides: {
        y: {
          type: 'num',
          min: 0,
          max: 10,
          ticks: [2, 4, 6, 8],
          labels: {
            2: 'Two',
            4: 'Four',
            6: 'Six',
            8: 'Eight'
          }
        }
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    redraw = function() {
      jsondata.shift();
      jsondata.push({
        index: i++,
        value: Math.random() * 10
      });
      spec.layers[0].data.update({
        data: jsondata
      });
      c.make(spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.spline_missing2 = function(dom) {
    var data;
    data = polyjs.data({
      data: [
        {
          a: 2,
          b: null
        }, {
          a: void 0,
          b: 7
        }, {
          a: 9,
          b: null
        }, {
          a: 5
        }, {
          a: null,
          b: 3
        }, {
          a: void 0,
          b: null
        }
      ]
    });
    return polyjs.chart({
      layer: {
        data: data,
        type: 'spline',
        x: 'a',
        y: 'b'
      },
      dom: dom
    });
  };

  this.examples.spline_missing = function(dom) {
    var data;
    data = polyjs.data({
      data: [
        {
          a: 2,
          b: 4
        }, {
          a: 3,
          b: 7
        }, {
          a: 9,
          b: 10
        }, {
          a: 5
        }, {
          a: null,
          b: 3
        }, {
          a: void 0,
          b: null
        }
      ]
    });
    return polyjs.chart({
      layer: {
        data: data,
        type: 'spline',
        x: 'a',
        y: 'b'
      },
      dom: dom
    });
  };

  this.examples.spline_sum = function(dom) {
    var c, data, i, jsondata, next, redraw, s, spec;
    i = 0;
    s = 0;
    next = function() {
      var v;
      v = Math.random() * 10;
      s += v;
      return {
        index: i++,
        value: v,
        total: s
      };
    };
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push(next());
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'spline',
          x: 'index',
          y: 'total'
        }, {
          data: data,
          type: 'point',
          x: 'index',
          y: 'total',
          id: 'index'
        }
      ],
      guides: {
        y: {
          min: 0
        }
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    redraw = function() {
      jsondata.shift();
      jsondata.push(next());
      spec.layers[0].data.update({
        data: jsondata
      });
      c.make(spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.spline_flip = function(dom) {
    var c, data, i, jsondata, redraw, spec;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'spline',
          x: 'index',
          y: 'value'
        }, {
          data: data,
          type: 'point',
          x: 'index',
          y: 'value',
          id: 'index'
        }
      ],
      guides: {
        y: {
          type: 'num',
          min: 0,
          max: 10,
          ticks: [2, 4, 6, 8],
          labels: {
            2: 'Two',
            4: 'Four',
            6: 'Six',
            8: 'Eight'
          }
        }
      },
      coord: {
        type: 'cartesian',
        flip: true
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    redraw = function() {
      jsondata.shift();
      jsondata.push({
        index: i++,
        value: Math.random() * 10
      });
      spec.layers[0].data.update({
        data: jsondata
      });
      c.make(spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.spline_static = function(dom) {
    var c, data, jsondata, spec;
    jsondata = [
      {
        a: 1,
        b: 5,
        c: 'A'
      }, {
        a: 3,
        b: 4,
        c: 'A'
      }, {
        a: 2,
        b: 3,
        c: 'A'
      }, {
        a: 2,
        b: 2,
        c: 'B'
      }, {
        a: 1,
        b: 4,
        c: 'B'
      }, {
        a: 2.2,
        b: 3,
        c: 'B'
      }, {
        a: 3,
        b: 3,
        c: 'B'
      }
    ];
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'spline',
          x: 'a',
          y: 'b',
          color: 'c'
        }
      ],
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

  this.examples.spline_date = function(dom) {
    var c, data, jsondata, spec;
    jsondata = [
      {
        a: '2012-01-01',
        b: 5,
        c: 'A'
      }, {
        a: '2012-01-02',
        b: 6,
        c: 'A'
      }, {
        a: '2012-01-03',
        b: 3,
        c: 'A'
      }, {
        a: '2012-01-04',
        b: 2,
        c: 'B'
      }, {
        a: '2012-01-05',
        b: 4,
        c: 'B'
      }, {
        a: '2012-01-06',
        b: 3,
        c: 'B'
      }, {
        a: '2012-01-07',
        b: 3,
        c: 'B'
      }
    ];
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'spline',
          x: 'a',
          y: 'b'
        }
      ],
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

  this.examples.spline_path = function(dom) {
    var c, data, jsondata, spec;
    jsondata = [
      {
        a: 1,
        b: 5,
        c: 'A'
      }, {
        a: 3,
        b: 4,
        c: 'A'
      }, {
        a: 2,
        b: 3,
        c: 'A'
      }, {
        a: 2,
        b: 2,
        c: 'B'
      }, {
        a: 1,
        b: 4,
        c: 'B'
      }, {
        a: 2.2,
        b: 3,
        c: 'B'
      }, {
        a: 3,
        b: 3,
        c: 'B'
      }
    ];
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'spline',
          x: 'a',
          y: 'b',
          color: 'c'
        }, {
          data: data,
          type: 'point',
          x: 'a',
          y: 'b',
          color: 'c'
        }
      ],
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

  this.examples.spline_series = function(dom) {
    var c, hdata, hestavollandata_raw, htooltip, hv, i, jshdata, jsvdata, spec, vdata, volldata_raw, vv;
    hestavollandata_raw = [4.3, 5.1, 4.3, 5.2, 5.4, 4.7, 3.5, 4.1, 5.6, 7.4, 6.9, 7.1, 7.9, 7.9, 7.5, 6.7, 7.7, 7.7, 7.4, 7.0, 7.1, 5.8, 5.9, 7.4, 8.2, 8.5, 9.4, 8.1, 10.9, 10.4, 10.9, 12.4, 12.1, 9.5, 7.5, 7.1, 7.5, 8.1, 6.8, 3.4, 2.1, 1.9, 2.8, 2.9, 1.3, 4.4, 4.2, 3.0, 3.0];
    volldata_raw = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.3, 0.0, 0.0, 0.4, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6, 1.2, 1.7, 0.7, 2.9, 4.1, 2.6, 3.7, 3.9, 1.7, 2.3, 3.0, 3.3, 4.8, 5.0, 4.8, 5.0, 3.2, 2.0, 0.9, 0.4, 0.3, 0.5, 0.4];
    jshdata = (function() {
      var _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = hestavollandata_raw.length; _i < _len; i = ++_i) {
        hv = hestavollandata_raw[i];
        _results.push({
          index: i,
          value: hv
        });
      }
      return _results;
    })();
    jsvdata = (function() {
      var _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = volldata_raw.length; _i < _len; i = ++_i) {
        vv = volldata_raw[i];
        _results.push({
          index: i,
          value: vv
        });
      }
      return _results;
    })();
    hdata = polyjs.data({
      data: jshdata
    });
    vdata = polyjs.data({
      data: jsvdata
    });
    htooltip = function(item) {
      var date, indexTime, windValue;
      date = item.index < 24 ? "6. Oct 2009, " : "7. Oct 2009, ";
      indexTime = (item.index % 24) > 9 ? (item.index % 24) + ":00" : "0" + (item.index % 24) + ":00";
      windValue = item.value + "m/s";
      return date + indexTime + ": " + windValue;
    };
    spec = {
      layers: [
        {
          data: hdata,
          type: 'spline',
          x: 'index',
          y: 'value',
          color: {
            "const": '#85CD00'
          },
          size: {
            "const": 3
          }
        }, {
          data: hdata,
          type: 'point',
          x: 'index',
          y: 'value',
          color: {
            "const": '#88CE02'
          },
          size: {
            "const": 4
          },
          tooltip: htooltip
        }, {
          data: vdata,
          type: 'spline',
          x: 'index',
          y: 'value',
          color: {
            "const": '#85CDBA'
          },
          size: {
            "const": 3
          }
        }, {
          data: vdata,
          type: 'point',
          x: 'index',
          y: 'value',
          color: {
            "const": '#89CEBB'
          },
          size: {
            "const": 4
          },
          tooltip: htooltip
        }
      ],
      guides: {
        y: {
          min: 0,
          max: 13
        }
      },
      width: 1200,
      height: 500,
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

  this.examples.spline_polar = function(dom) {
    var c, data, i, jsondata, redraw, spec;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'spline',
          x: 'index',
          y: 'value'
        }, {
          data: data,
          type: 'point',
          x: 'index',
          y: 'value',
          id: 'index'
        }
      ],
      guides: {
        y: {
          type: 'num',
          min: 0,
          max: 10,
          ticks: [2, 4, 6, 8],
          labels: {
            2: 'Two',
            4: 'Four',
            6: 'Six',
            8: 'Eight'
          }
        }
      },
      coord: {
        type: 'polar'
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    redraw = function() {
      jsondata.shift();
      jsondata.push({
        index: i++,
        value: Math.random() * 10
      });
      spec.layers[0].data.update({
        data: jsondata
      });
      c.make(spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.spline_polar_log = function(dom) {
    var c, data, i, jsondata, redraw, spec;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 1; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'spline',
          x: 'index',
          y: 'value'
        }, {
          data: data,
          type: 'point',
          x: 'index',
          y: 'value',
          id: 'index'
        }
      ],
      guides: {
        y: {
          type: 'num',
          min: 0,
          max: 10,
          ticks: [2, 4, 6, 8],
          labels: {
            2: 'Two',
            4: 'Four',
            6: 'Six',
            8: 'Eight'
          }
        },
        x: {
          scale: {
            type: 'log'
          }
        }
      },
      coord: {
        type: 'polar'
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    redraw = function() {
      jsondata.shift();
      jsondata.push({
        index: i++,
        value: Math.random() * 10
      });
      spec.layers[0].data.update({
        data: jsondata
      });
      c.make(spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.spline_polar_flip = function(dom) {
    var c, data, i, jsondata, redraw, spec;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'spline',
          x: 'index',
          y: 'value'
        }, {
          data: data,
          type: 'point',
          x: 'index',
          y: 'value',
          id: 'index'
        }
      ],
      guides: {
        y: {
          type: 'num',
          min: 0,
          max: 10,
          ticks: [2, 4, 6, 8],
          labels: {
            2: 'Two',
            4: 'Four',
            6: 'Six',
            8: 'Eight'
          }
        }
      },
      coord: {
        type: 'polar',
        flip: true
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    redraw = function() {
      jsondata.shift();
      jsondata.push({
        index: i++,
        value: Math.random() * 10
      });
      spec.layers[0].data.update({
        data: jsondata
      });
      c.make(spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

  this.examples.spline_tooltip = function(dom) {
    var c, data, i, jsondata, spec, spline_tool;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          value: Math.sin(Math.random() * Math.PI)
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spline_tool = function(item) {
      var square, tooltip;
      square = item.value * item.value;
      return tooltip = "The square of this value is " + square;
    };
    spec = {
      layers: [
        {
          data: data,
          type: 'spline',
          x: 'index',
          y: 'value'
        }, {
          data: data,
          type: 'point',
          x: 'index',
          y: 'value',
          tooltip: spline_tool
        }
      ],
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

  this.examples.step = function(dom) {
    var c, data, i, jsondata, redraw, spec;
    jsondata = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _results.push({
          index: i,
          value: Math.random() * 10
        });
      }
      return _results;
    })();
    data = polyjs.data({
      data: jsondata
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'step',
          x: 'index',
          y: 'value'
        }, {
          data: data,
          type: 'point',
          x: 'index',
          y: 'value',
          id: 'index'
        }
      ],
      guides: {
        y: {
          type: 'num',
          min: 0,
          max: 10,
          ticks: [2, 4, 6, 8],
          labels: {
            2: 'Two',
            4: 'Four',
            6: 'Six',
            8: 'Eight'
          }
        }
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    redraw = function() {
      jsondata.shift();
      jsondata.push({
        index: i++,
        value: Math.random() * 10
      });
      spec.layers[0].data.update({
        data: jsondata
      });
      c.make(spec);
      return setTimeout(redraw, 1000);
    };
    return setTimeout(redraw, 1000);
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var _ref;

  if ((_ref = this.examples) == null) {
    this.examples = {};
  }

  this.examples.text = function(dom) {
    var c, data, jsondata, sampleLayer, spec;
    jsondata = [
      {
        x: 'A',
        y: 'X'
      }, {
        x: 'B',
        y: 'Y'
      }, {
        x: 'C',
        y: 'Z'
      }
    ];
    data = polyjs.data({
      data: jsondata
    });
    sampleLayer = {
      data: data,
      type: 'text',
      x: 'x',
      y: 'y',
      text: 'y'
    };
    spec = {
      layers: [sampleLayer],
      coord: {
        type: 'polar',
        flip: true
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    return c.addHandler(function(type, data) {
      if (type === 'click' || type === 'reset') {
        console.log(data);
        return alert(type);
      }
    });
  };

  this.examples.text_size = function(dom) {
    var c, data, jsondata, sampleLayer, spec;
    jsondata = [
      {
        x: 'A',
        y: 'X',
        z: 5
      }, {
        x: 'B',
        y: 'Y',
        z: 2
      }, {
        x: 'C',
        y: 'Z',
        z: 3
      }
    ];
    data = polyjs.data({
      data: jsondata
    });
    sampleLayer = {
      data: data,
      type: 'text',
      x: 'x',
      y: 'y',
      text: 'y',
      size: {
        "const": 32
      }
    };
    spec = {
      layers: [sampleLayer],
      coord: {
        type: 'polar',
        flip: true
      },
      dom: dom
    };
    c = polyjs.chart(spec);
    return c.addHandler(function(type, data) {
      if (type === 'click' || type === 'reset') {
        console.log(data);
        return alert(type);
      }
    });
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var datafn, _ref;

  if ((_ref = this.examples) == null) {
    this.examples = {};
  }

  datafn = function() {
    var a, b, i, item, value, _i, _results;
    a = function(i) {
      return i % 5;
    };
    b = function(i) {
      return Math.floor(i / 5);
    };
    value = function() {
      return Math.random() * 5 - 2.5;
    };
    item = function(i) {
      return {
        mod5: a(i),
        floor5: b(i),
        value: value()
      };
    };
    _results = [];
    for (i = _i = 0; _i <= 24; i = ++_i) {
      _results.push(item(i));
    }
    return _results;
  };

  this.examples.tiles = function(dom) {
    var c, data, spec;
    data = polyjs.data({
      data: datafn()
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'tile',
          x: 'bin(mod5, 1)',
          y: 'bin(floor5,1)',
          color: 'value'
        }
      ],
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

  this.examples.tiles_bw = function(dom) {
    var c, data, spec;
    data = polyjs.data({
      data: datafn()
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'tile',
          x: 'bin(mod5, 1)',
          y: 'bin(floor5,1)',
          color: 'value'
        }
      ],
      guides: {
        color: {
          scale: {
            type: 'gradient',
            lower: '#FFF',
            upper: '#000'
          }
        }
      },
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

  this.examples.tiles_g2 = function(dom) {
    var c, data, spec;
    data = polyjs.data({
      data: datafn()
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'tile',
          x: 'bin(mod5, 1)',
          y: 'bin(floor5,1)',
          color: 'value'
        }
      ],
      guides: {
        color: {
          scale: {
            type: 'gradient2',
            lower: 'red',
            upper: 'blue',
            middle: 'white'
          }
        }
      },
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

  this.examples.tiles_custom = function(dom) {
    var c, data, spec;
    data = polyjs.data({
      data: datafn()
    });
    spec = {
      layers: [
        {
          data: data,
          type: 'tile',
          x: 'bin(mod5, 1)',
          y: 'bin(floor5,1)',
          color: 'value'
        }
      ],
      guides: {
        color: {
          scale: function(value) {
            if (value < 0) {
              return 'red';
            } else if (value < 1) {
              return 'blue';
            } else {
              return 'gray';
            }
          }
        }
      },
      dom: dom
    };
    return c = polyjs.chart(spec);
  };

}).call(this);
